{"version":3,"sources":["login/errors/UsernameErrors.jsx","login/inputs/UsernameInput.jsx","login/errors/PasswordErrors.jsx","login/inputs/PasswordInput.jsx","login/buttons/Button.jsx","login/buttons/LoginButtons.jsx","login/processing/CheckLoginAttempt.js","login/LoginForm.jsx","system/Logout.jsx","nav/NavHamburger.jsx","nav/NavMenu.jsx","nav/NavBar.jsx","network/errors/HostnameErrors.jsx","network/inputs/HostnameInput.jsx","network/inputs/FormCheckbox.jsx","network/inputs/IpRadioButtons.jsx","network/errors/Ipv4SingleOctetError.jsx","network/errors/Ipv4AllOctetErrors.jsx","network/errors/Ipv4CidrErrors.jsx","network/inputs/Ipv4Input.jsx","network/Network.jsx","system/Password.jsx","system/Title.jsx","system/SystemMain.jsx","login/processing/CheckSession.js","App.js","reportWebVitals.js","index.js"],"names":["UsernameErrors","id","this","props","inputName","className","errorRefresh","errorExit","hasError","htmlFor","inputId","style","isEmpty","display","fieldTitle","tooShort","minLength","tooLong","maxLength","needsLetter","hasInvalidChar","React","Component","InputField","state","userVal","stateVal","undefined","String","trim","setState","updateParentState","length","test","name","inputRefresh","type","placeholder","onChange","event","checkUsernameValue","target","value","disabled","required","PasswordErrors","passwordMismatch","missingChar","needsLowerCase","needsUpperCase","needsDigit","needsSpecial","PasswordInput","passVal","checkPasswordValue","Button","extraClass","onClick","preventDefault","title","text","LoginButtons","inputEmpty","inputError","processing","submitDisabled","loginAttemptFn","getSubmitTitle","resetFn","CheckLoginAttempt","username","password","substring","numHashIter","a","result","checkLoginLocalStorage","checkLoginCookie","ReferenceError","hasLocalStorage","recordName","record","localStorage","getItem","JSON","parse","console","error","createAccount","salt","hashPassword","hashResult","TEST_KEY","window","stringify","setItem","removeItem","supportsCookies","contents","document","cookie","cookieIndex","indexOf","nextIndex","cookiePassword","generateHexString","date","Date","setTime","getTime","MAX_AGE","toUTCString","iter","crypto","subtle","digest","TextEncoder","encode","then","buf","Array","prototype","map","call","Uint8Array","x","toString","slice","join","checkSessionCookie","checkSessionStorage","SESSION_TITLE","COOKIE_TITLE","createSessionCookie","sessionId","hasSessionStorage","sessionStorage","extendSessionCookie","generateSessionId","cookieVal","oldId","newId","split","index","splice","expireRecord","expireNum","Number","isNaN","extendSessionStorage","createInSessionStorage","navigator","cookieEnabled","numBits","msCrypto","getRandomValues","numbers","hex","numHex","Math","floor","random","LoginForm","USERNAME_NAME","PASSWORD_NAME","passwordHasError","loginChecker","LoginAttempt","checkAccount","loginSuccess","checkSession","loginDisappear","setTimeout","updateLoginStatus","usernameHasError","usernameRefresh","passwordRefresh","USERNAME_ERROR","USERNAME_REFRESH","PASSWORD_ERROR","PASSWORD_REFRESH","PASSWORD_WRONG","UsernameInput","loginAttempt","resetForm","Logout","NavHamburger","navToggled","NavMenu","setupMenuToggled","currentItem","getElementById","componentId","stopPropagation","setComponentId","NavBar","body","backgroundSize","toggleNavMenu","role","HostnameErrors","ITEM_CLASS","LIST_CLASS","DISPLAY_VALUE","errorAppearance","totalTooLong","maxTotalLength","labelTooLong","maxLabelLength","consecPeriod","invalidStart","invalidEnd","invalidUnder","HostnameInput","hostnameErrors","notQualified","newValue","ERROR_OBJ_KEY","errorObj","toLowerCase","fullyQualified","inputAppearance","checkHostname","DhcpCheckbox","checked","IpRadioButtons","IPV4_VALUE","IPV6_VALUE","IPV4_MAPPED_VALUE","IP_RADIO_NAME","IPV4_RADIO_VALUE","IPV4_CHECKED","IPV6_RADIO_VALUE","IPV6_CHECKED","IPV4_MAPPED_RADIO_VALUE","IPV4_MAPPED_CHECKED","defaultChecked","Ipv4SingleOctetError","octetError","label","nonDigit","tooLarge","maxNum","notPrivate","Ipv4AllOctetErrors","ipv4OctetErrors","numOctets","dateStr","octetErrorList","Ipv4CidrErrors","cidrErrors","ERROR_ITEM_CLASS","tooManyChar","numTooLarge","rangeTooLarge","Ipv4Input","isPressedKeyDigit","key","which","charCode","keyCode","isString","ERROR_ENDING","OCTET_NAME","propName","octetIndex","returnErrorObj","strVal","numVal","checkCidrOnOctetChange","exitVal","checkOctetErrorExit","CIDR_ERROR","CIDR_NAME","HAS_ERROR_PROP","cidrVal","cidrErrorObj","checkCidrSum","hadError","currentError","prop","octet1Prop","octet2Prop","checkOctetValue","onlyPrivate","octet2Val","ipRegex","RegExp","ipStart","octetHasError","prevError","errorProp","indexError","CIDR_PROP","cidrRequired","cidrStr","cidrPower","hexStr","ipStr","octetProp","octetVal","numEntry","hexEntry","ipNum","parseInt","cidrNum","pow","ipMax","OCTET_UPPER","INPUT_ENDING","OCTET_1_PROP","OCTET_LOWER","OCTET_2_PROP","OCTET_3_PROP","OCTET_4_PROP","OCTET_1_NAME","OCTET_2_NAME","OCTET_3_NAME","OCTET_4_NAME","LABEL_CLASS_NAME","PERIOD_CLASS_NAME","SMALL_COLOR_CLASS","INVALID_CLASS_NAME","OCTET_INPUT_TYPE","CIDR_UPPER","CIDR_ID","CIDR_PLACEHOLDER","OCTET_WRAPPER_ID","typeChecked","OCTET_CLASS_NAME","pattern","onKeyDown","checkOctet1Value","checkOctet2Value","octet1Error","octet2Error","octet3Error","octet4Error","HALF_INPUT_CLASS","checkCidrValue","Network","HOSTNAME_NAME","IP_NAME","NETMASK_NAME","GATEWAY_NAME","DNS1_NAME","DNS2_NAME","IPV4_NAME","IPV6_NAME","IPV4_MAPPED_IPV6","HOSTNAME_REFRESH","DHCP_NAME","IP_CHECKBOX_NAME","FormCheckbox","checkedName","Password","Title","SystemMain","pageTitle","DEFAULT_TITLE","getComponent","getMainElement","endIndex","App","loading","isLoggedIn","SessionCheck","attemptResult","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c0fce085.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass UsernameErrors extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div  \r\n                id = { this.props.inputName + \"ErrorContainer\" } \r\n                className = { \"fieldErrorContainer\" + \r\n                    ( this.props.errorRefresh ? \" fieldErrorRefresh\" : \"\" ) \r\n                }\r\n            >\r\n                <label \r\n                    id = { this.props.inputName  + \"ErrorMessage\" } \r\n\r\n                    className = { \"fieldErrorMessage \" + (\r\n                        this.props.errorExit \r\n                            ? \"fieldErrorExit\" \r\n                            : this.props.hasError \r\n                                ? \"fieldErrorAppear\" \r\n                                : \"hideInput\" \r\n                        )\r\n                    }\r\n\r\n                    htmlFor = { this.props.inputId } \r\n                >\r\n                    <strong \r\n                        id = { this.props.inputName + \"RequiredError\" } \r\n                        className = \"fieldErrorItem\" \r\n                        style = { this.props.isEmpty \r\n                            ? { display: \"inline-block\" } \r\n                            : { display: \"none\" }\r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } is required.\r\n                    </strong>\r\n\r\n                    <strong \r\n                        id = { this.props.inputName + \"ShortError\" } \r\n                        className = \"fieldErrorItem\" \r\n                        style = { this.props.tooShort  \r\n                            ? { display: \"inline-block\" } \r\n                            : { display: \"none\" }\r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } must be at \r\n                        least { this.props.minLength } characters in length. \r\n                    </strong>\r\n\r\n                    <strong \r\n                        id = { this.props.inputName + \"LongError\" } \r\n                        className = \"fieldErrorItem\" \r\n                        style = { this.props.tooLong \r\n                            ? { display: \"inline-block\" } \r\n                            : { display: \"none\" }\r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } can be at \r\n                        most { this.props.maxLength } characters in length. \r\n                    </strong>\r\n\r\n                    <strong \r\n                        id = { this.props.inputName + \"LetterError\" } \r\n                        className = \"fieldErrorItem\" \r\n                        style = { this.props.needsLetter \r\n                            ? { display: \"inline-block\" } \r\n                            : { display: \"none\" }\r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } must contain at least one \r\n                        letter (A-Z or a-z). \r\n                    </strong> \r\n\r\n                    <ul \r\n                        id = { this.props.inputName + \"CharTypeError\" } \r\n                        className = \"fieldErrorList\" \r\n                        style = { this.props.hasInvalidChar \r\n                            ? { display: \"inline-block\" } \r\n                            : { display: \"none\" }\r\n                        }\r\n                    >\r\n                        Invalid character(s). { this.props.fieldTitle } can \r\n                        only include:  \r\n\r\n                        <li>letters (a-z or A-Z);</li>\r\n                        <li>digits (0-9);</li>\r\n                        <li>underscores (_);</li>\r\n                        <li>dashes (-).</li>\r\n                    </ul>\r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UsernameErrors;","import React          from \"react\";\r\nimport UsernameErrors from \"../errors/UsernameErrors\";\r\n\r\nclass InputField extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            hasError: false, \r\n            errorExit: false, \r\n            isEmpty: false, \r\n            tooShort: false, \r\n            tooLong: false, \r\n            needsLetter: false, \r\n            hasInvalidChar: false \r\n        };\r\n    }\r\n\r\n    checkUsernameValue(userVal) {\r\n\r\n        const stateVal = {};\r\n\r\n        /* Coerces different data type input values to a String. */\r\n        userVal = userVal === undefined || userVal === null \r\n            ? \"\" : String(userVal).trim();\r\n\r\n        /* The username input field is required. */\r\n        if (userVal) {\r\n\r\n            stateVal.isEmpty = false;\r\n        }\r\n        else {\r\n\r\n            this.setState({\r\n                hasError: true, \r\n                isEmpty: true, \r\n                tooShort: false, \r\n                tooLong: false, \r\n                needsLetter: false, \r\n                hasInvalidChar: false \r\n            });\r\n\r\n            this.props.updateParentState(userVal, true);\r\n            return;\r\n        }\r\n        \r\n        /* Overly short usernames are not very unique. */\r\n        stateVal.tooShort = userVal.length < this.props.minLength;\r\n\r\n        /* Limits username length for screen printability and storage in \r\n         databases. */\r\n        stateVal.tooLong = userVal.length > this.props.maxLength;\r\n        \r\n        /* Required for attempt to make more human-friendly usernames. */\r\n        stateVal.needsLetter = !/[a-zA-Z]/.test(userVal);\r\n\r\n        /* Potential character range purposefully limited to prevent SQL \r\n         injection or Cross-Site Scripting attacks via username characters. */\r\n        stateVal.hasInvalidChar = /[^\\w-]/.test(userVal);\r\n\r\n        stateVal.hasError = stateVal.tooShort || stateVal.tooLong \r\n            || stateVal.needsLetter || stateVal.hasInvalidChar;\r\n\r\n        stateVal.errorExit = this.state.hasError && !stateVal.hasError;\r\n\r\n        /* Update the Component's state. */\r\n        this.setState(stateVal);\r\n        this.props.updateParentState(userVal, stateVal.hasError);\r\n    }\r\n\r\n    render() {\r\n\r\n        const inputId = this.props.name + \"Field\";\r\n\r\n        return (\r\n            <div className = \"inputContainer\">\r\n\r\n                <label \r\n                    className = \"fieldLabel\" \r\n                    htmlFor = { inputId } \r\n                >\r\n                    { this.props.fieldTitle }\r\n                </label>\r\n\r\n                <input\r\n                    id = { inputId } \r\n\r\n                    className = { \"inputField \" + (\r\n                        this.props.inputRefresh \r\n                            ? \"inputRefresh\" \r\n                            : this.props.errorRefresh || !this.state.hasError \r\n                                ? \"regularInput\" \r\n                                : \"invalidInput\" \r\n                        )\r\n                    } \r\n                    \r\n                    name = { this.props.name } \r\n                    type = \"text\" \r\n                    placeholder = { this.props.fieldTitle } \r\n\r\n                    onChange = { (event) => {\r\n                        this.checkUsernameValue(event.target.value);\r\n                    } } \r\n\r\n                    value = { this.props.value } \r\n                    minLength = { this.props.minLength } \r\n                    maxLength = { this.props.maxLength } \r\n                    disabled = { this.props.disabled } \r\n                    required = \"\" \r\n                />\r\n\r\n                <UsernameErrors \r\n                    inputId = { inputId } \r\n                    inputName = { this.props.name } \r\n                    fieldTitle = { this.props.fieldTitle } \r\n                    minLength = { this.props.minLength } \r\n                    hasError = { this.state.hasError } \r\n                    errorExit = { this.state.errorExit } \r\n                    isEmpty = { this.state.isEmpty } \r\n                    tooShort = { this.state.tooShort } \r\n                    tooLong = { this.state.tooLong } \r\n                    needsLetter = { this.state.needsLetter } \r\n                    hasInvalidChar = { this.state.hasInvalidChar } \r\n                    errorRefresh = { this.props.errorRefresh } \r\n                />\r\n\r\n                <hr className = \"inputDivider\" />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputField;","import React from 'react';\r\n\r\nclass PasswordErrors extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div  \r\n                id = { this.props.inputName + \"ErrorContainer\" } \r\n                className = { \"fieldErrorContainer\" + \r\n                    ( this.props.errorRefresh ? \" fieldErrorRefresh\" : \"\" ) \r\n                }\r\n            >\r\n                <label \r\n                    id = { this.props.inputName  + \"ErrorMessage\" } \r\n\r\n                    className = { \"fieldErrorMessage \" + (\r\n                            this.props.errorExit \r\n                                ? \"fieldErrorExit\" \r\n                                : this.props.hasError \r\n                                    ? \"fieldErrorAppear\" \r\n                                    : \"hideInput\" \r\n                        ) \r\n                    }\r\n\r\n                    htmlFor = { this.props.inputId } \r\n                >\r\n                    <strong \r\n                        id = { this.props.inputName + \"MismatchError\" } \r\n                        className = \"fieldErrorItem\" \r\n                        style = { this.props.passwordMismatch \r\n                            ? { display: \"inline-block\" } \r\n                            : { display: \"none\" } \r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } is incorrect. \r\n                    </strong>\r\n\r\n                    <strong \r\n                        id = { this.props.inputName + \"RequiredError\" } \r\n                        className = \"fieldErrorItem\" \r\n                        style = { this.props.isEmpty \r\n                            ? { display: \"inline-block\" } \r\n                            : { display: \"none\" } \r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } is required.\r\n                    </strong>\r\n\r\n                    <strong \r\n                        id = { this.props.inputName + \"ShortError\" } \r\n                        className = \"fieldErrorItem\" \r\n                        style = { this.props.tooShort \r\n                            ? { display: \"inline-block\" } \r\n                            : { display: \"none\" } \r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } must be at \r\n                        least { this.props.minLength } characters in length. \r\n                    </strong>\r\n\r\n                    <ul \r\n                        id = { this.props.inputName + \"CharTypeError\" } \r\n                        className = \"fieldErrorList\" \r\n                        \r\n                        style = { this.props.missingChar \r\n                            ? { display: \"inline-block\" } \r\n                            : { display: \"none\" } \r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } must include at least one:\r\n\r\n                        <li \r\n                            style = { this.props.needsLowerCase \r\n                                ? { display: \"list-item\" } \r\n                                : { display: \"none\" } \r\n                            }\r\n                        >\r\n                            lowercase letter (a-z)\r\n                        </li>\r\n\r\n                        <li \r\n                            style = { this.props.needsUpperCase \r\n                                ? { display: \"list-item\" } \r\n                                : { display: \"none\" } \r\n                            }\r\n                        >\r\n                            uppercase letter (A-Z)\r\n                        </li>\r\n\r\n                        <li \r\n                            style = { this.props.needsDigit \r\n                                ? { display: \"list-item\" } \r\n                                : { display: \"none\" } \r\n                            }\r\n                        >\r\n                            digit (0-9)\r\n                        </li>\r\n\r\n                        <li \r\n                            style = { this.props.needsSpecial \r\n                                ? { display: \"list-item\" } \r\n                                : { display: \"none\" }\r\n                            }\r\n                        >\r\n                            special character\r\n                        </li>\r\n                    </ul>\r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PasswordErrors;","import React          from 'react';\r\nimport PasswordErrors from \"../errors/PasswordErrors\";\r\n\r\nclass PasswordInput extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            hasError: false, \r\n            errorExit: false, \r\n            isEmpty: false, \r\n            tooShort: false, \r\n            missingChar: false, \r\n            needsLowerCase: false, \r\n            needsUpperCase: false, \r\n            needsDigit: false, \r\n            needsSpecial: false \r\n        };\r\n    }\r\n\r\n    checkPasswordValue(passVal) {\r\n\r\n        let stateVal = {};\r\n\r\n        /* Coerces different data type values to a String. */\r\n        passVal = passVal === undefined || passVal === null \r\n            ? \"\" : String(passVal).trim();\r\n\r\n        /* Empty password input is not allowed since the password field is \r\n         required. */\r\n        if (passVal) {\r\n\r\n            stateVal.isEmpty = false;\r\n        }\r\n        else {\r\n\r\n            this.setState({\r\n                hasError: true, \r\n                isEmpty: true, \r\n                tooShort: false, \r\n                missingChar: false, \r\n                needsLowerCase: false, \r\n                needsUpperCase: false, \r\n                needsDigit: false, \r\n                needsSpecial: false \r\n            });\r\n\r\n            this.props.updateParentState(passVal, true);\r\n            return;\r\n        }\r\n\r\n        /* Higher minimum password length required for stronger passwords. */\r\n        stateVal.tooShort = passVal.length < this.props.minLength;\r\n\r\n        /* An uppercase letter, lowercase letter, digit, and special character \r\n         are required for increased password strength. */\r\n\r\n        /* Lowercase letter range regular expression check */\r\n        stateVal.needsLowerCase = !/[a-z]/.test(passVal);\r\n\r\n        /* Uppercase letter range regular expression check */\r\n        stateVal.needsUpperCase = !/[A-Z]/.test(passVal);\r\n\r\n        /* Digit range regular expression check */\r\n        stateVal.needsDigit = !/[\\d]/.test(passVal);\r\n\r\n        /* Special character regular expression check: not a letter, digit, or \r\n         spacing character. */\r\n        stateVal.needsSpecial = !/[^A-Za-z\\d\\s]/.test(passVal);\r\n\r\n        stateVal.missingChar = \r\n            stateVal.needsLowerCase || stateVal.needsUpperCase \r\n            || stateVal.needsDigit || stateVal.needsSpecial;\r\n        \r\n        stateVal.hasError = stateVal.tooShort || stateVal.missingChar;\r\n        stateVal.errorExit = this.state.hasError && !stateVal.hasError;\r\n\r\n        /* Updates the form control state. */\r\n        this.setState(stateVal);\r\n        this.props.updateParentState(passVal, stateVal.hasError);\r\n    }\r\n\r\n    render() {\r\n\r\n        const inputId = this.props.name + \"Field\";\r\n\r\n        return (\r\n            <div className=\"inputContainer\">\r\n\r\n                <label \r\n                    className=\"fieldLabel\" \r\n                    htmlFor = { inputId } \r\n                >\r\n                    { this.props.fieldTitle }\r\n                </label>\r\n\r\n                <input\r\n                    id = { inputId } \r\n\r\n                    className = { \"inputField \" + (\r\n                        this.props.inputRefresh \r\n                            ? \"inputRefresh\" \r\n                            : this.props.errorRefresh || !this.state.hasError \r\n                                ? \"regularInput\" \r\n                                : \"invalidInput\" \r\n                        )\r\n                    } \r\n                    \r\n                    name = { this.props.name } \r\n                    type = \"password\" \r\n                    placeholder = { this.props.fieldTitle } \r\n\r\n                    onChange = { (event) => {\r\n                        this.checkPasswordValue(event.target.value);\r\n                    } } \r\n\r\n                    value = { this.props.value } \r\n                    minLength = { this.props.minLength } \r\n                    disabled = { this.props.disabled } \r\n                    required = \"\" \r\n                />\r\n\r\n                <PasswordErrors \r\n                    inputId = { inputId } \r\n                    inputName = { this.props.name } \r\n                    fieldTitle = { this.props.fieldTitle } \r\n                    minLength = { this.props.minLength } \r\n                    hasError = { \r\n                        this.state.hasError || this.props.passwordMismatch \r\n                    } \r\n                    errorExit = { this.state.errorExit } \r\n                    isEmpty = { this.state.isEmpty } \r\n                    tooShort = { this.state.tooShort } \r\n                    missingChar = { this.state.missingChar } \r\n                    needsLowerCase = { this.state.needsLowerCase } \r\n                    needsUpperCase = { this.state.needsUpperCase } \r\n                    needsDigit = { this.state.needsDigit } \r\n                    needsSpecial = { this.state.needsSpecial } \r\n                    passwordMismatch = { this.props.passwordMismatch } \r\n                    errorRefresh = { this.props.errorRefresh } \r\n                />\r\n\r\n                <hr className=\"inputDivider\" />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PasswordInput;","import React from 'react';\r\n\r\nclass Button extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <button\r\n                className = { \"button\" + this.props.extraClass } \r\n                type = { this.props.type }\r\n                disabled = { this.props.disabled }\r\n\r\n                onClick = { (event) => {\r\n                    event.preventDefault();\r\n                    this.props.onClick();\r\n                } }\r\n\r\n                title = { this.props.title } \r\n            >\r\n                { this.props.text }\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;","import React  from \"react\";\r\nimport Button from \"./Button\";\r\n\r\nclass LoginButtons extends React.Component {\r\n\r\n    getSubmitTitle() {\r\n\r\n        if ( this.props.inputEmpty ) {\r\n\r\n            return \"Fill out username and password to log in.\";\r\n        }\r\n        \r\n        if ( this.props.inputError ) {\r\n\r\n            return \"Correct errors before submitting.\";\r\n        }\r\n        \r\n        if ( this.props.processing ) {\r\n\r\n            return \"Processing...\";\r\n        }\r\n        \r\n        return \"Click to submit form input.\";\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className = \"formButtonWrapper\">\r\n                <div className = \"formButtonContainer\">\r\n                    <Button \r\n                        extraClass = { \r\n                            !this.props.inputError && ( this.props.inputEmpty \r\n                                || this.props.processing ) \r\n                                    ? \" buttonDisabled\" \r\n                                    : \"\" \r\n                        }\r\n\r\n                        text = \"Submit\" \r\n                        type = \"submit\" \r\n\r\n                        disabled = { this.props.submitDisabled } \r\n\r\n                        onClick = { () => { \r\n                            return this.props.loginAttemptFn();\r\n                        } } \r\n\r\n                        title = { this.getSubmitTitle() } \r\n                    />\r\n                </div>\r\n                \r\n                <div className = \"formButtonContainer\">\r\n                    <Button\r\n                        extraClass = {\r\n                            this.props.processing ? \" buttonDisabled\" : \"\" \r\n                        }\r\n\r\n                        text = \"Cancel\" \r\n                        type = \"button\" \r\n\r\n                        disabled = { this.props.processing } \r\n\r\n                        onClick = { () => { \r\n                            this.props.resetFn(); \r\n                        } } \r\n\r\n                        title = { this.props.processing ? \"Processing...\" \r\n                            : \"Click to clear login form.\" \r\n                        }\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginButtons;","\r\nclass CheckLoginAttempt {\r\n\r\n    /* - Test session verification functions. \r\n       - If session is already active, add code to extend the life of the \r\n         session, starting from the current time. \r\n    */\r\n    constructor(username, password) {\r\n\r\n        this.username = username;\r\n        this.password = password.substring(0, 4096);\r\n        this.numHashIter = 5000;\r\n    }\r\n\r\n    async checkAccount() {\r\n\r\n        let result = this.checkLoginLocalStorage();\r\n\r\n        if (result !== null) {\r\n\r\n            return result;\r\n        }\r\n\r\n        result = this.checkLoginCookie();\r\n\r\n        if (result !== null) {\r\n\r\n            return result;\r\n        }\r\n\r\n        throw new ReferenceError(\"No JavaScript APIs found for storing login \" \r\n            + \"information.\");\r\n    }\r\n\r\n    async checkLoginLocalStorage() {\r\n\r\n        if ( !this.hasLocalStorage() ) {\r\n\r\n            return null;\r\n        }\r\n\r\n        const recordName = \"reactTest_\" + this.username;\r\n        let record = localStorage.getItem(recordName);\r\n        \r\n        if (record) {\r\n            \r\n            try {\r\n\r\n                record = JSON.parse(record);\r\n            }\r\n            catch (error) {\r\n\r\n                console.error(error);\r\n                return this.createAccount();\r\n            }\r\n\r\n            if ( record.password && record.salt ) {\r\n\r\n                const hashResult = await this.hashPassword(\r\n                    this.password + record.salt, this.numHashIter \r\n                );\r\n    \r\n                return hashResult === record.password;\r\n            }\r\n        }\r\n\r\n        return this.createAccount();\r\n    }\r\n\r\n    hasLocalStorage() {\r\n\r\n        const TEST_KEY = \"enabled\";\r\n\r\n        if (!localStorage) {\r\n\r\n            localStorage = window.localStorage;\r\n        }\r\n\r\n        if ( !localStorage || !JSON || !JSON.stringify || !JSON.parse ) {\r\n\r\n            return false;\r\n        }\r\n\r\n        try {\r\n\r\n            localStorage.setItem(TEST_KEY, \"true\");\r\n        }\r\n        catch (error) {\r\n\r\n            console.error(error);\r\n            return false;\r\n        }\r\n\r\n        localStorage.removeItem(TEST_KEY);\r\n        return true;\r\n    }\r\n\r\n    async checkLoginCookie() {\r\n\r\n        const recordName = \"reactTest_\" + this.username;\r\n\r\n        if ( !this.supportsCookies() ) {\r\n            \r\n            return null;\r\n        }\r\n\r\n        let contents = document.cookie;\r\n        let cookieIndex = contents.indexOf(recordName + \"=\");\r\n\r\n        if (cookieIndex === -1) {\r\n\r\n            return this.createAccount();\r\n        }\r\n\r\n        cookieIndex += recordName.length + 1;\r\n        let nextIndex = contents.indexOf(\",\", cookieIndex);\r\n\r\n        if (nextIndex === -1) {\r\n\r\n            return this.createAccount();\r\n        }\r\n        \r\n        const cookiePassword = contents.substring(cookieIndex, nextIndex);\r\n        cookieIndex = nextIndex + 1;\r\n        nextIndex = contents.indexOf(\";\", cookieIndex);\r\n\r\n        if (nextIndex === -1) {\r\n\r\n            return this.createAccount();\r\n        }\r\n\r\n        const salt = contents.substring(cookieIndex, nextIndex);\r\n\r\n        const hashResult = await this.hashPassword(\r\n            this.password + salt, this.numHashIter\r\n        );\r\n\r\n        return hashResult === cookiePassword;\r\n    }\r\n\r\n    async createAccount() {\r\n\r\n        const salt = this.generateHexString(256);\r\n\r\n        const password = await this.hashPassword(\r\n            this.password + salt, this.numHashIter\r\n        );\r\n\r\n        const recordName = \"reactTest_\" + this.username;\r\n\r\n        if (localStorage) {\r\n\r\n            try {\r\n\r\n                localStorage.setItem(recordName, JSON.stringify({\r\n                    username: this.username, \r\n                    password: password, \r\n                    salt: salt\r\n                }));\r\n\r\n                return true;\r\n            }\r\n            catch (error) {\r\n\r\n                console.error(error);\r\n            }\r\n        }\r\n\r\n        if ( this.supportsCookies() ) {\r\n\r\n            const MAX_AGE = 86400; // 1 day in seconds \r\n            const contents = password + \",\" + salt;\r\n            const date = new Date();\r\n            date.setTime( date.getTime() + (MAX_AGE * 1000) );\r\n\r\n            document.cookie = recordName + \"=\" + contents \r\n                + \"; max-age=\" + MAX_AGE + \"; expires=\" + date.toUTCString() \r\n                + \"; SameSite=Strict; \";\r\n            \r\n            return document.cookie.indexOf(recordName + \"=\") >= 0;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Hashes the password provided to the class the specified number of times \r\n     * using a client-side implementation of the SHA-512 hashing function. \r\n     */\r\n    async hashPassword(password, iter) {\r\n\r\n        return await crypto.subtle.digest(\r\n            \"SHA-512\", new TextEncoder(\"utf-8\").encode(password) \r\n        ).then(buf => {\r\n            return Array.prototype.map.call(\r\n                new Uint8Array(buf), \r\n                x => ( ( '00' + x.toString(16) ).slice(-2) ) \r\n            ).join('');\r\n        }).then( (hashResult) => {\r\n            return iter ? this.hashPassword(hashResult, iter - 1) \r\n                : hashResult;\r\n        });\r\n    }\r\n\r\n    checkSession() {\r\n\r\n        if ( this.checkSessionCookie() || this.checkSessionStorage() ) {\r\n\r\n            return true;\r\n        }\r\n\r\n        throw new ReferenceError(\"No JavaScript APIs supported or enabled for \" \r\n            + \"storing session information.\");\r\n    }\r\n\r\n    checkSessionCookie() {\r\n\r\n        if ( !this.supportsCookies() ) {\r\n\r\n            return false;\r\n        }\r\n\r\n        const SESSION_TITLE = \"sessionId\";\r\n        const COOKIE_TITLE = SESSION_TITLE + \"=\";\r\n        let contents = document.cookie;\r\n        let cookieIndex = contents.indexOf(COOKIE_TITLE);\r\n\r\n        if (cookieIndex === -1) {\r\n\r\n            return this.createSessionCookie();\r\n        }\r\n\r\n        cookieIndex += COOKIE_TITLE.length;\r\n        let nextIndex = contents.indexOf(\";\", cookieIndex);\r\n\r\n        if (nextIndex === -1) {\r\n\r\n            return this.createSessionCookie();\r\n        }\r\n\r\n        let sessionId = contents.substring(cookieIndex, nextIndex);\r\n\r\n        if ( this.hasSessionStorage() \r\n             && sessionId !== sessionStorage.getItem(SESSION_TITLE) ) {\r\n\r\n            return this.createSessionCookie(sessionId);\r\n        }\r\n\r\n        return this.extendSessionCookie();\r\n    }\r\n\r\n    createSessionCookie() {\r\n\r\n        if ( !this.supportsCookies() ) {\r\n\r\n            return false;\r\n        }\r\n\r\n        const SESSION_TITLE = \"sessionId\", MAX_AGE = 1800;\r\n        const sessionId = this.generateSessionId();\r\n        const cookieVal = SESSION_TITLE + \"=\" + sessionId;\r\n\r\n        let date = new Date();\r\n        date.setTime( date.getTime() + (MAX_AGE * 1000) );\r\n\r\n        document.cookie = cookieVal + \"; max-age=\" + MAX_AGE \r\n            + \"; expires=\" + date.toUTCString() + \"; SameSite=Strict; \";\r\n\r\n        if ( this.hasSessionStorage() ) {\r\n\r\n            try {\r\n\r\n                sessionStorage.setItem(SESSION_TITLE, sessionId);\r\n            }\r\n            catch (error) {\r\n\r\n                console.error(error);\r\n            }\r\n        }\r\n\r\n        return document.cookie.indexOf(cookieVal) >= 0;\r\n    }\r\n\r\n    generateSessionId(oldId) {\r\n\r\n        const NUM_BITS = 64;\r\n\r\n        if (oldId) {\r\n            \r\n            let newId;\r\n\r\n            do newId = this.generateHexString(NUM_BITS);\r\n            while (oldId !== newId)\r\n\r\n            return newId;\r\n        }\r\n        \r\n        return this.generateHexString(NUM_BITS);\r\n    }\r\n\r\n    extendSessionCookie() {\r\n\r\n        /* Check cannot be done if the browser does not support cookies or has \r\n         cookies disabled. */\r\n        if ( !this.supportsCookies() ) {\r\n\r\n            return null;\r\n        }\r\n\r\n        const contents = document.cookie.split(/;[\\s]+/);\r\n        const COOKIE_NAME = \"sessionId=\", MAX_AGE = 1800, date = new Date();\r\n        date.setTime( date.getTime() + (MAX_AGE * 1000) );\r\n\r\n        let index = 0;\r\n        \r\n        while ( index < contents.length \r\n            && contents[index].indexOf(COOKIE_NAME) !== 0 ) {\r\n\r\n            index++;\r\n        }\r\n\r\n        if ( index === contents.length ) {\r\n\r\n            return false;\r\n        }\r\n\r\n        index++;\r\n\r\n        contents.splice( index, 0, \"max-age=\" + MAX_AGE );\r\n        index++;\r\n\r\n        contents.splice( index, 0, \"expires=\" + date.toUTCString() );\r\n        index++;\r\n\r\n        document.cookie = contents.join(\"; \");\r\n        return true;\r\n    }\r\n\r\n    checkSessionStorage() {\r\n\r\n        if ( !this.hasSessionStorage() ) {\r\n\r\n            return false;\r\n        }\r\n\r\n        const RECORD_TITLE = \"sessionExpires\";\r\n        const expireRecord = sessionStorage.getItem(RECORD_TITLE);\r\n\r\n        if (expireRecord) {\r\n\r\n            let expireNum = Number(expireRecord);\r\n\r\n            if ( !isNaN(expireNum) \r\n                 && (new Date).getTime() < expireNum ) {\r\n                \r\n                return this.extendSessionStorage();\r\n            }\r\n        }\r\n\r\n        return this.createInSessionStorage();\r\n    }\r\n\r\n    createInSessionStorage() {\r\n\r\n        if ( !this.hasSessionStorage() ) {\r\n\r\n            return false;\r\n        }\r\n\r\n        const RECORD_TITLE = \"sessionExpires\", MAX_AGE = 1800000;\r\n\r\n        try {\r\n\r\n            sessionStorage.setItem(\r\n                RECORD_TITLE, \r\n                String( ( new Date() ).getTime() + MAX_AGE ) \r\n            );\r\n        }\r\n        catch (error) {\r\n\r\n            console.error(error);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    extendSessionStorage() {\r\n\r\n        if ( !this.hasSessionStorage() ) {\r\n\r\n            return false;\r\n        }\r\n\r\n        const RECORD_TITLE = \"sessionExpires\", MAX_AGE = 1800000;\r\n\r\n        try {\r\n\r\n            sessionStorage.setItem(\r\n                RECORD_TITLE, \r\n                String( ( new Date() ).getTime() + MAX_AGE ) \r\n            );\r\n        }\r\n        catch (error) {\r\n\r\n            console.error(error);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    hasSessionStorage() {\r\n\r\n        if (!sessionStorage) {\r\n\r\n            sessionStorage = window.sessionStorage;\r\n        }\r\n        \r\n        return !!sessionStorage;\r\n    }\r\n\r\n    supportsCookies() {\r\n\r\n        return \"cookie\" in document && window.navigator.cookieEnabled;\r\n    }\r\n\r\n    generateHexString(numBits) {\r\n\r\n        const crypto = window.crypto || window.msCrypto;\r\n        \r\n        /* Not guaranteed to run in a secure context (HTTPS), but does generate \r\n         cryptographically secure pseudo-random numbers. */\r\n        if (crypto && crypto.getRandomValues) {\r\n            \r\n            /* Bitwise signed right shift by 3 spaces. Optimization equivalent \r\n             to division by 8. */\r\n            let numbers = new Uint8Array(numBits >> 3), hex = \"\";\r\n            numbers = crypto.getRandomValues(numbers);\r\n\r\n            for (let index = 0; index < numbers.length; index++) {\r\n\r\n                hex += numbers[index].toString(16);\r\n            }\r\n\r\n            return hex;\r\n        }\r\n\r\n        /* Backup approach. Not recommended since Math.random() does not \r\n         generate cryptographically secure pseudo-random numbers. */\r\n\r\n        /* Bitwise signed right shift by 3 spaces. Optimization equivalent \r\n         to division by 4. */\r\n        let numHex = numBits >> 2, hex = \"\";\r\n\r\n        while (numHex) {\r\n\r\n            hex += Math.floor(Math.random() * 16).toString(16);\r\n            numHex--;\r\n        }\r\n\r\n        return hex;\r\n    }\r\n}\r\n\r\nexport default CheckLoginAttempt;","/* Core React imports */\r\nimport React from \"react\";\r\n\r\n/* Custom component and functionality class imports */\r\nimport UsernameInput from \"./inputs/UsernameInput\";\r\nimport PasswordInput from \"./inputs/PasswordInput\";\r\nimport LoginButtons  from \"./buttons/LoginButtons\";\r\nimport LoginAttempt  from \"./processing/CheckLoginAttempt\";\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        \r\n        /* Passes the \"props\" object to the Component class constructor. */\r\n        super(props);\r\n\r\n        const USERNAME_NAME = \"username\", PASSWORD_NAME = \"password\";\r\n        const ERROR_ENDING = \"HasError\", REFRESH_ENDING = \"Refresh\";\r\n\r\n        this.state = {\r\n\r\n            /* Username value from the username form control */\r\n            [USERNAME_NAME]: \"\", \r\n\r\n            /* Indicates whether or not there is an error with the user input \r\n             in the username form control. */\r\n            [USERNAME_NAME + ERROR_ENDING]: false, \r\n\r\n            /* Password value from the password form control */\r\n            [PASSWORD_NAME]: \"\", \r\n\r\n            /* Indicates whether or not the input in the password field does \r\n             not match the password for an existing account with a taken \r\n             username. */\r\n            [PASSWORD_NAME + \"Mismatch\"]: false, \r\n\r\n            /* Indicates whether or not there is an error with the user input \r\n             for the password form control. */\r\n            [PASSWORD_NAME + ERROR_ENDING]: false, \r\n\r\n            /* Used when a user clicks \"Submit\" and when the API is checking \r\n             whether the user login data is valid. Any form input controls or \r\n             buttons will be disabled during this time. Prevents the API from \r\n             being flooded with duplicate requests. */\r\n            processing: false, \r\n\r\n            /* Indicates whether to toggle a form input field refresh animation \r\n             after the \"Cancel\" button is pressed on the login form. */\r\n            inputRefresh: false, \r\n\r\n            /* Indicates whether to hide existing error messages for the \r\n             \"Username\" input field when the \"Cancel\" button is pressed on the \r\n             login form. */\r\n            [USERNAME_NAME + REFRESH_ENDING]: false, \r\n\r\n            /* Indicates whether to hide existing error messages for the \r\n             \"Username\" input field after the \"Cancel\" button is pressed on the \r\n             login form. */\r\n            [PASSWORD_NAME + REFRESH_ENDING]: false, \r\n\r\n            /* Indicates whether the login form should play an exiting \r\n             animation after a user has successfully logged in. If false, an \r\n             entry animation is played on Component load. */\r\n            loginDisappear: false\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Imitates the process of creating an account with a unique username that \r\n     * is normally done using a server-side programming language, except using \r\n     * client-side JavaScript. The password is hashed with a salt and inserted \r\n     * into the JavaScript LocalStorage API to emulate storage into a database. \r\n     * \r\n     * *** Note that using client-side password hashing and storage for account \r\n     * details is very insecure, and this function is NOT intended for use in \r\n     * commercial, production code. The main purpose of this application is to \r\n     * demonstrate front-end React code and not necessarily to implement any \r\n     * server-side functionality. bcrypt, scrypt, or Argon2 should also be used \r\n     * over SHA-512-based approaches. ***\r\n     * \r\n     * Potential Update: Implement server-side hashing and database storage \r\n     * using the Node.js Express.js package and MongoDB. \r\n     */\r\n    async loginAttempt() {\r\n\r\n        /* \r\n            - Disable form inputs from changing while login information is \r\n              being checked. \r\n            - If login page or any other page is visited, write logic that \r\n              checks whether or not a session currently exists. \r\n            - If so, automatically redirect and mount the Main Page Component. \r\n            - If not, let the user know that their session has expired, and \r\n              they need to log in again. \r\n        */\r\n\r\n        this.setState({ \r\n            processing: true, \r\n            passwordMismatch: false, \r\n            passwordHasError: false \r\n        });\r\n\r\n        const loginChecker = new LoginAttempt(\r\n            this.state.username, this.state.password \r\n        );\r\n        \r\n        let loginSuccess = await loginChecker.checkAccount();\r\n\r\n        this.setState({ \r\n            passwordMismatch: !loginSuccess, \r\n            passwordHasError: !loginSuccess \r\n        });\r\n\r\n        if (!loginSuccess) {\r\n\r\n            this.setState({ processing: false });\r\n            return false;\r\n        }\r\n\r\n        loginSuccess = loginSuccess && loginChecker.checkSession();\r\n        this.setState({ loginDisappear: true });\r\n        \r\n        setTimeout( () => {\r\n\r\n            if (loginSuccess) {\r\n\r\n                this.props.updateLoginStatus(loginSuccess);\r\n            }\r\n\r\n        }, 700);\r\n        \r\n        return loginSuccess;\r\n    }\r\n\r\n    resetForm() {\r\n\r\n        /* Reset the form input field values and appearances by resetting the \r\n         state properties to their default values. */\r\n        this.setState({\r\n            username: \"\", \r\n            usernameHasError: false, \r\n            password: \"\", \r\n            passwordMismatch: false, \r\n            passwordHasError: false, \r\n            processing: false, \r\n            inputRefresh: true, \r\n            usernameRefresh: true, \r\n            passwordRefresh: true \r\n        });\r\n\r\n        setTimeout( () => {\r\n            this.setState({ inputRefresh: false });\r\n        }, 150);\r\n    }\r\n\r\n    render() {\r\n\r\n        const USERNAME_NAME = \"username\", PASSWORD_NAME = \"password\";\r\n        const ERROR_ENDING = \"HasError\", REFRESH_ENDING = \"Refresh\";\r\n\r\n        const USERNAME_ERROR = USERNAME_NAME + ERROR_ENDING;\r\n        const USERNAME_REFRESH = USERNAME_NAME + REFRESH_ENDING;\r\n        const PASSWORD_ERROR = PASSWORD_NAME + ERROR_ENDING;\r\n        const PASSWORD_REFRESH = PASSWORD_NAME + REFRESH_ENDING;\r\n        const PASSWORD_WRONG = PASSWORD_NAME + \"Mismatch\";\r\n\r\n        const MIN_USERNAME_LENGTH = 5, MAX_USERNAME_LENGTH = 20;\r\n        const MIN_PASSWORD_LENGTH = 8;\r\n\r\n        let inputEmpty = !this.state[USERNAME_NAME] \r\n            || !this.state[PASSWORD_NAME];\r\n        \r\n        let inputError = this.state[USERNAME_ERROR] \r\n            || ( this.state[PASSWORD_ERROR] \r\n                && !this.state[PASSWORD_WRONG] );\r\n\r\n        return (\r\n            <div \r\n                className = { \"formContainer \" + (\r\n                    this.state.loginDisappear \r\n                        ? \"formContainerDisappear\" \r\n                        : \"formContainerLoaded\" \r\n                ) } \r\n            >\r\n                <h1 className = \"formTitle\">\r\n                    Login\r\n                </h1>\r\n\r\n                <form id = \"loginForm\">\r\n\r\n                    <UsernameInput \r\n                        name = { USERNAME_NAME } \r\n                        fieldTitle = \"Username\" \r\n\r\n                        value = { \r\n                            this.state[ USERNAME_NAME ] \r\n                                ? this.state[ USERNAME_NAME ] \r\n                                : \"\" \r\n                        } \r\n\r\n                        updateParentState = { (userVal, hasError) => {\r\n                            this.setState({\r\n                                [ USERNAME_NAME ]:    userVal, \r\n                                [ USERNAME_ERROR ]:   hasError, \r\n                                [ USERNAME_REFRESH ]: false \r\n                            });\r\n                        } }\r\n\r\n                        minLength = { MIN_USERNAME_LENGTH } \r\n                        maxLength = { MAX_USERNAME_LENGTH } \r\n                        disabled = { this.state.processing } \r\n                        inputRefresh = { this.state.inputRefresh } \r\n                        errorRefresh = { this.state[ USERNAME_REFRESH ] } \r\n                    />\r\n\r\n                    <PasswordInput \r\n                        name = { PASSWORD_NAME } \r\n                        fieldTitle = \"Password\" \r\n\r\n                        value = { this.state[PASSWORD_NAME] \r\n                            ? this.state[PASSWORD_NAME]  \r\n                            : \"\" \r\n                        } \r\n\r\n                        updateParentState = { (userVal, hasError) => {\r\n                            this.setState({\r\n                                [ PASSWORD_NAME ]:    userVal, \r\n                                [ PASSWORD_ERROR ]:   hasError, \r\n                                [ PASSWORD_REFRESH ]: false \r\n                            });\r\n                        } }\r\n\r\n                        minLength = { MIN_PASSWORD_LENGTH } \r\n                        disabled = { this.state.processing } \r\n                        passwordMismatch = { this.state[PASSWORD_WRONG] }\r\n                        inputRefresh = { this.state.inputRefresh } \r\n                        errorRefresh = { this.state[PASSWORD_REFRESH] } \r\n                    />\r\n\r\n                    <LoginButtons \r\n                        submitDisabled = { \r\n                            this.state.processing || inputEmpty || inputError \r\n                        } \r\n\r\n                        inputEmpty = { inputEmpty } \r\n                        inputError = { inputError } \r\n                        processing = { this.state.processing } \r\n\r\n                        loginAttemptFn = { () => {\r\n                            return this.loginAttempt() \r\n                        } } \r\n\r\n                        resetFn = { () => {\r\n                            this.resetForm();\r\n                        } } \r\n                    />\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginForm;","/* Core React import section */\r\nimport React from \"react\";\r\n\r\n/* Stylesheet import section */\r\n\r\n/* Custom Component import section */\r\n\r\n\r\nclass Logout extends React.Component {\r\n\r\n\r\n}\r\n\r\nexport default Logout;","import React   from \"react\";\r\n\r\nclass NavHamburger extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div \r\n                id = \"navHamburgerIcon\" \r\n                className = \"navHamburgerContainer preventSelection\" \r\n\r\n                onClick = { (event) => {\r\n                    this.props.onClick(event);\r\n                } } \r\n\r\n                title = {\r\n                    this.props.navToggled \r\n                        ? \"Press to close navigation menu.\" \r\n                        : \"Press to open navigation menu.\" \r\n                }\r\n            >\r\n                <span\r\n                    id = \"navHamburgerTopLine\" \r\n                    className = \"navHamburgerLine\" \r\n                />\r\n\r\n                <span\r\n                    id = \"navHamburgerMiddleLine\" \r\n                    className = \"navHamburgerLine\" \r\n                />\r\n\r\n                <span\r\n                    id = \"navHamburgerBottomLine\" \r\n                    className = \"navHamburgerLine\" \r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavHamburger;","/* Core React import section */\r\nimport React from \"react\";\r\n\r\nclass NavMenu extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            setupMenuToggled: false \r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const currentItem = document.getElementById( \r\n            this.props.componentId + \"NavItem\" \r\n        );\r\n\r\n        if (currentItem) {\r\n\r\n            currentItem.id = \"currentNavItem\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <ul \r\n                id = \"navInnerList\" \r\n                className = \"navInnerList\" \r\n            >\r\n                <li \r\n                    id = \"setupNavItem\"\r\n                    className = \"navItem\" \r\n\r\n                    onClick = { (event) => {\r\n\r\n                        event.preventDefault();\r\n                        event.stopPropagation();\r\n\r\n                        this.setState({\r\n                            setupMenuToggled: !this.state.setupMenuToggled \r\n                        });\r\n                    } } \r\n                >\r\n                    <span \r\n                        id = \"setupSubMenuArrow\" \r\n                        className = { \"navSubMenuArrow \" + (\r\n                            this.state.setupMenuToggled \r\n                                ? \"arrowDown\" \r\n                                : \"arrowRight\" \r\n                        ) } \r\n                    />\r\n\r\n                    <span \r\n                        id = \"setupNavItemTitle\" \r\n                        className=\"navItemTitle preventSelection\" \r\n                    >\r\n                        Setup\r\n                    </span>\r\n\r\n                    <ul \r\n                        id = \"setupSubMenu\" \r\n                        className = { \"navSubMenu\" + (\r\n                            this.state.setupMenuToggled \r\n                                ? \" expandNavSubMenu\" : \"\" \r\n                        ) }\r\n                    >\r\n                        <li \r\n                            id = \"networkNavItem\" \r\n                            className = \"navSubMenuItem\" \r\n\r\n                            onClick = { (event) => {\r\n                                this.props.setComponentId(event, \"network\");\r\n                            } } \r\n                        >\r\n                            <span \r\n                                id = \"networkNavItemTitle\" \r\n                                className=\"navSubItemTitle preventSelection\" \r\n                            >\r\n                                Network\r\n                            </span>\r\n                        </li>\r\n\r\n                        <li \r\n                            id = \"passwordNavItem\" \r\n                            className = \"navSubMenuItem\" \r\n\r\n                            onClick = { (event) => {\r\n                                this.props.setComponentId(event, \"password\");\r\n                            } } \r\n                        >\r\n                            <span \r\n                                id = \"passwordNavItemTitle\" \r\n                                className=\"navSubItemTitle preventSelection\" \r\n                            >\r\n                                Password\r\n                            </span>\r\n                        </li>\r\n\r\n                        <li \r\n                            id = \"titleNavItem\" \r\n                            className = \"navSubMenuItem\" \r\n\r\n                            onClick = { (event) => {\r\n                                this.props.setComponentId(event, \"title\");\r\n                            } } \r\n                        >\r\n                            <span \r\n                                id = \"titleNavItemTitle\" \r\n                                className=\"navSubItemTitle preventSelection\" \r\n                            >\r\n                                Title\r\n                            </span>\r\n                        </li>\r\n                    </ul>\r\n                </li>\r\n                \r\n                <li \r\n                    id = \"logoutNavItem\" \r\n                    className = \"navItem\" \r\n\r\n                    onClick = { (event) => {\r\n                        this.props.setComponentId(event, \"logout\");\r\n                    } } \r\n                >\r\n                    <span \r\n                        id = \"logoutNavItemTitle\" \r\n                        className=\"navItemTitle preventSelection\"\r\n                    >\r\n                        Logout\r\n                    </span>\r\n                </li>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavMenu;","/* Core React file import section */\r\nimport React   from \"react\";\r\n\r\n/* Stylsheet import section */\r\nimport \"../stylesheets/NavStyles.css\";\r\n\r\n/* Custom Component import section */\r\nimport NavHamburger from \"./NavHamburger\";\r\nimport NavMenu      from \"./NavMenu\";\r\n\r\nclass NavBar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            navToggled: false\r\n        };\r\n    }\r\n\r\n    toggleNavMenu(event) {\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        \r\n        this.setState({ \r\n            navToggled: !this.state.navToggled \r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        /* Checks if the user's Internet browser supports the \"background-size\" \r\n         CSS3 property, which had support added in most Internet browsers \r\n         around the same time that further semantic HTML5 elements, such as \r\n         \"header\" and \"nav\", were added. */\r\n        if ( typeof document.body.style.backgroundSize === \"string\" ) {\r\n\r\n            return (\r\n                <header \r\n                    id = \"systemHeader\" \r\n                    className = \"systemHeader\"\r\n                >\r\n                    <NavHamburger \r\n                        onClick = { (event) => {\r\n                            this.toggleNavMenu(event);\r\n                        } } \r\n\r\n                        navToggled = { this.state.navToggled } \r\n                    />\r\n\r\n                    <nav \r\n                        id = \"systemNavBar\" \r\n\r\n                        className = { \"systemNavBar\" + (\r\n                            this.state.navToggled ? \" expandNavBar\" : \"\" \r\n                        ) } \r\n                    > \r\n                        <NavMenu \r\n                            setComponentId = { this.props.setComponentId } \r\n                        />\r\n                    </nav>\r\n                </header>\r\n            );\r\n        }\r\n\r\n        /* If the user's Internet browser does not support CSS3 properties or \r\n         HTML5 semantic elements, use div elements in place of the semantic \r\n         HTML5 elements with a \"role\" attribute value added to specify a  \r\n         semantic purpose. */\r\n        return (\r\n            <div  \r\n                id = \"systemHeader\" \r\n                className = \"systemHeader\" \r\n                role = \"header\" \r\n            >\r\n                <NavHamburger \r\n                    onClick = { (event) => {\r\n                        this.toggleNavMenu(event);\r\n                    } } \r\n                />\r\n\r\n                <div  \r\n                    id = \"systemNavBar\" \r\n\r\n                    className = { \"systemNavBar\" + (\r\n                        this.state.navToggled ? \" expandNavBar\" : \"\" \r\n                    ) } \r\n\r\n                    role = \"navigation\" \r\n                > \r\n                    <NavMenu \r\n                        setComponentId = { this.props.setComponentId } \r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nclass HostnameErrors extends React.Component {\r\n\r\n    errorAppearance() {\r\n\r\n        const ERROR_OBJ_KEY = \"hostnameErrors\";\r\n\r\n        if ( this.props[ ERROR_OBJ_KEY ].errorExit ) {\r\n\r\n            return \"fieldErrorExit\";\r\n        }\r\n        \r\n        if ( this.props[ ERROR_OBJ_KEY ].hasError ) {\r\n\r\n            return \"fieldErrorAppear\";\r\n        }\r\n        \r\n        return \"hideInput\";\r\n    }\r\n\r\n    render() {\r\n\r\n        const ITEM_CLASS = \"fieldErrorItem\", LIST_CLASS = \"fieldErrorList\";\r\n        const DISPLAY_VALUE = \"inline-block\", ERROR_OBJ_KEY = \"hostnameErrors\";\r\n\r\n        return (\r\n            <div  \r\n                id = { this.props.inputName + \"ErrorContainer\" } \r\n\r\n                className = { \"fieldErrorContainer\" + \r\n                    ( this.props.errorRefresh ? \" fieldErrorRefresh\" : \"\" ) \r\n                }\r\n            >\r\n                <label \r\n                    id = { this.props.inputName  + \"ErrorMessage\" } \r\n\r\n                    className = { \r\n                        \"fieldErrorMessage \" + this.errorAppearance() \r\n                    } \r\n\r\n                    htmlFor = { this.props.inputId } \r\n                >\r\n                    <strong \r\n                        id = { this.props.inputName + \"RequiredError\" } \r\n\r\n                        className = { ITEM_CLASS } \r\n\r\n                        style = { \r\n                            this.props[ ERROR_OBJ_KEY ].isEmpty \r\n                                ? { display: DISPLAY_VALUE } \r\n                                : { display: \"none\" } \r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } is required.\r\n                    </strong>\r\n\r\n                    <strong \r\n                        id = { this.props.inputName + \"TotalLengthError\" } \r\n\r\n                        className = { ITEM_CLASS } \r\n\r\n                        style = { \r\n                            this.props[ ERROR_OBJ_KEY ].totalTooLong \r\n                                ? { display: DISPLAY_VALUE } \r\n                                : { display: \"none\" } \r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } can be at \r\n                        most { this.props.maxTotalLength } characters \r\n                        in length. \r\n                    </strong>\r\n\r\n                    <strong \r\n                        id = { this.props.inputName + \"LabelLengthError\" } \r\n\r\n                        className = { ITEM_CLASS } \r\n\r\n                        style = { \r\n                            this.props[ ERROR_OBJ_KEY ].labelTooLong \r\n                                ? { display: DISPLAY_VALUE } \r\n                                : { display: \"none\" } \r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } labels* can be at \r\n                        most { this.props.maxLabelLength } characters in \r\n                        length. \r\n                    </strong> \r\n\r\n                    <ul \r\n                        id = { this.props.inputName + \"CharTypeError\" } \r\n\r\n                        className = { LIST_CLASS } \r\n\r\n                        style = { \r\n                            this.props[ ERROR_OBJ_KEY ].hasInvalidChar \r\n                                ? { display: DISPLAY_VALUE } \r\n                                : { display: \"none\" } \r\n                        }\r\n                    >\r\n                        Invalid character(s). { this.props.fieldTitle } can \r\n                        only include:  \r\n\r\n                        <li>\r\n                            letters (a-z or A-Z);\r\n                        </li>\r\n\r\n                        <li>\r\n                            digits (0-9);\r\n                        </li>\r\n\r\n                        <li>\r\n                            underscores (_);\r\n                        </li>\r\n\r\n                        <li>\r\n                            hyphens (-);\r\n                        </li>\r\n\r\n                        <li>\r\n                            non-consecutive periods (.).\r\n                        </li>\r\n                    </ul> \r\n\r\n                    <strong \r\n                        id = { \r\n                            this.props.inputName + \"ConsecPeriodError\" \r\n                        } \r\n\r\n                        className = { ITEM_CLASS } \r\n\r\n                        style = { \r\n                            this.props[ ERROR_OBJ_KEY ].consecPeriod \r\n                                ? { display: DISPLAY_VALUE } \r\n                                : { display: \"none\" } \r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } cannot contain consecutive \r\n                        sequences of periods (.). \r\n                    </strong> \r\n\r\n                    <ul \r\n                        id = { this.props.inputName + \"StartError\" } \r\n\r\n                        className = { LIST_CLASS } \r\n\r\n                        style = { \r\n                            this.props[ ERROR_OBJ_KEY ].invalidStart \r\n                                ? { display: DISPLAY_VALUE } \r\n                                : { display: \"none\" } \r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } cannot contain the following \r\n                        as a starting character: \r\n\r\n                        <li>hypens (-);</li>\r\n                        <li>periods (.).</li>\r\n                    </ul>\r\n\r\n                    <ul \r\n                        id = { this.props.inputName + \"EndError\" } \r\n\r\n                        className = { LIST_CLASS } \r\n\r\n                        style = { \r\n                            this.props[ ERROR_OBJ_KEY ].invalidEnd  \r\n                                ? { display: DISPLAY_VALUE } \r\n                                : { display: \"none\" } \r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } cannot contain the following \r\n                        as an ending character: \r\n\r\n                        <li>hyphens (-);</li>\r\n                        <li>periods (.).</li>\r\n                    </ul>\r\n\r\n                    <strong \r\n                        id = { \r\n                            this.props.inputName + \"StartError\" \r\n                        } \r\n\r\n                        className = { ITEM_CLASS } \r\n\r\n                        style = { \r\n                            this.props[ ERROR_OBJ_KEY ].invalidUnder \r\n                                ? { display: DISPLAY_VALUE } \r\n                                : { display: \"none\" } \r\n                        } \r\n                    >\r\n                        { this.props.fieldTitle } labels* cannot contain \r\n                        underscores as both the starting and ending characters. \r\n                    </strong> \r\n\r\n                    <ul \r\n                        id = { this.props.inputName + \"QualifiedError\" } \r\n\r\n                        className = { LIST_CLASS } \r\n\r\n                        style = { \r\n                            this.props[ ERROR_OBJ_KEY ].invalidStart \r\n                                ? { display: DISPLAY_VALUE } \r\n                                : { display: \"none\" } \r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } must be a qualified domain \r\n                        name, meaning it must contain: \r\n\r\n                        <li>\r\n                            at least one period (.);\r\n                        </li>\r\n\r\n                        <li>\r\n                            characters before, between, and/or after any \r\n                            periods; \r\n                        </li>\r\n\r\n                        <li>\r\n                            a second-level domain name (ex. \"example\" in \r\n                            \"example.com\");\r\n                        </li>\r\n\r\n                        <li>\r\n                            a top-level domain name (ex. \"com\" in example.com); \r\n                        </li>\r\n\r\n                        <li>\r\n                            optionally, any computer hostname (ex. \"server1\" \r\n                            in \"server1.example.com\"); or \r\n                        </li> \r\n\r\n                        <li>\r\n                            optionally, any leaf domains (ex. \"subdomain\" in \r\n                            \"subdomain.example.com\"). \r\n                        </li>\r\n                    </ul>\r\n\r\n                    <p\r\n                        id = {\r\n                            this.props.inputName + \"LabelDefinition\"\r\n                        } \r\n\r\n                        className = { ITEM_CLASS } \r\n\r\n                        style = { \r\n                            this.props[ ERROR_OBJ_KEY ].labelTooLong \r\n                            || this.props[ ERROR_OBJ_KEY ].invalidUnder \r\n                                ? { display: DISPLAY_VALUE } \r\n                                : { display: \"none\" } \r\n                        } \r\n                    >\r\n                        *A hostname <dfn>label</dfn> is a sequence of \r\n                        non-period characters before, after, or between \r\n                        periods (.). \r\n                    </p>\r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HostnameErrors;","/* Core React import section */\r\nimport React from \"react\";\r\n\r\n/* Custom Component import section */\r\nimport HostnameErrors from \"../errors/HostnameErrors\";\r\n\r\nclass HostnameInput extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            hostnameErrors: {\r\n                hasError: false, \r\n                errorExit: false, \r\n                isEmpty: false, \r\n                totalTooLong: false, \r\n                labelTooLong: false, \r\n                hasInvalidChar: false, \r\n                consecPeriod: false, \r\n                invalidStart: false, \r\n                invalidEnd: false, \r\n                invalidUnder: false, \r\n                notQualified: false \r\n            }\r\n        };\r\n    }\r\n\r\n    inputAppearance() {\r\n\r\n        if ( this.props.inputRefresh ) {\r\n\r\n            return \"inputRefresh\";\r\n        }\r\n        \r\n        if ( this.props.errorRefresh \r\n             || !this.state.hostnameErrors.hasError ) {\r\n\r\n            return \"regularInput\";\r\n        }\r\n        \r\n        return \"invalidInput\";\r\n    }\r\n\r\n    checkHostname(newValue) {\r\n\r\n        const ERROR_OBJ_KEY = \"hostnameErrors\", MAX_TOTAL_LENGTH = 253;\r\n        const errorObj = {}\r\n\r\n        /* Coerces different data type input values to a String. */\r\n        newValue = newValue === undefined || newValue === null \r\n            ? \"\" : String(newValue).trim();\r\n\r\n        /* Checks whether or not the hostname value is empty. */\r\n        if (newValue) {\r\n\r\n            errorObj.isEmpty = false;\r\n        }\r\n        else {\r\n\r\n            this.setState({ \r\n                [ ERROR_OBJ_KEY ]: { \r\n                    hasError:       !!this.props.required, \r\n                    errorExit:      false, \r\n                    isEmpty:        !!this.props.required, \r\n                    totalTooLong:   false, \r\n                    labelTooLong:   false, \r\n                    hasInvalidChar: false, \r\n                    consecPeriod:   false, \r\n                    invalidStart:   false, \r\n                    invalidEnd:     false, \r\n                    invalidUnder:   false, \r\n                    notQualified:   false \r\n                } \r\n            });\r\n\r\n            this.props.updateParentState(newValue, true);\r\n            return;\r\n        }\r\n\r\n        /* Converts any ASCII uppercase letters to lowercase to make them \r\n         case-insensitive. */\r\n        newValue = newValue.toLowerCase();\r\n\r\n        /* Limits total hostname length to 253 characters. */\r\n        errorObj.totalTooLong = newValue.length > MAX_TOTAL_LENGTH;\r\n\r\n        if ( errorObj.totalTooLong ) {\r\n\r\n            newValue = newValue.substring( 0, MAX_TOTAL_LENGTH );\r\n        }\r\n\r\n        /* Limits hostname label, domain, or subdomain length to 64 \r\n         characters. */\r\n        errorObj.labelTooLong = /(?:^|\\.)[\\w-]{64,}(?:\\.|$)/.test(newValue);\r\n\r\n        /* Only allows ASCII letters (a-z and A-Z), digits (0-9), hyphens (-), \r\n         and delimiting periods (.) for hostnames. */\r\n        errorObj.hasInvalidChar = /[^\\w-.]/.test(newValue);\r\n\r\n        /* Does not allow consecutive delimiting periods (.) in a hostname, so \r\n         that there are characters between the dots of a hostname to label a \r\n         subdomain. */\r\n        errorObj.consecPeriod = /[.]{2,}/.test(newValue);\r\n\r\n        /* Does not permit a starting hyphen (-) or period (.). */\r\n        errorObj.invalidStart = /^[-.]/.test(newValue);\r\n\r\n        /* Does not permit an ending hyphen (-) or period (.). */\r\n        errorObj.invalidEnd = /[-.]$/.test(newValue);\r\n\r\n        /* Label, subdomain, or domain names cannot contain underscores at both \r\n           their start and end. Labels in the RegExp (regular expression) \r\n           objects can span: \r\n           - from the start to the end of the string, with no delimiting \r\n             periods in-between; \r\n           - from the start to the first period in the hostname; \r\n           - between two periods; or \r\n           - from the last period in the hostname to the end of the string. \r\n        */\r\n        errorObj.invalidUnder = /^_[^\\.]*_$/.test(newValue) \r\n            || /^_.*_\\./.test(newValue) || /\\._.*_\\./.test(newValue) \r\n            || /\\._.*_$/.test(newValue);\r\n\r\n        /* If any of the above checks were true, the hostname input value has \r\n         errors, and the input styling should update to reflect this. */\r\n        errorObj.hasError = errorObj.totalTooLong || errorObj.labelTooLong \r\n            || errorObj.hasInvalidChar || errorObj.consecPeriod \r\n            || errorObj.invalidStart || errorObj.invalidEnd \r\n            || errorObj.invalidUnder;\r\n\r\n        /* If a hostname must be a fully-qualified domain name, it must contain \r\n         at least one period. In the hostname \"example.com\", the last period \r\n         must be preceded by a second-level domain (example) and followed by a \r\n         top-level domain (com). */\r\n         if ( this.props.fullyQualified ) {\r\n\r\n            errorObj.notQualified = !/\\./.test(newValue);\r\n            errorObj.hasError = errorObj.hasError || errorObj.notQualified;\r\n        }\r\n\r\n        /* Play an exiting animation for any error messages if a input with a \r\n         formerly invalid value now has a valid value. */\r\n        errorObj.errorExit = this.state[ ERROR_OBJ_KEY ].hasError \r\n            && !errorObj.hasError;\r\n\r\n        /* Update the Component's state. */\r\n        this.setState({ \r\n            [ ERROR_OBJ_KEY ]: errorObj \r\n        });\r\n\r\n        this.props.updateParentState( newValue, errorObj.hasError );\r\n    }\r\n\r\n    render() {\r\n\r\n        const inputId = this.props.name + \"InputField\";\r\n        const ERROR_OBJ_KEY = \"hostnameErrors\";\r\n\r\n        /* Internet standard, not optional. */\r\n        const MAX_TOTAL_LENGTH = 253, MAX_LABEL_LENGTH = 63;\r\n\r\n        return (\r\n            <div className = \"inputContainer\">\r\n\r\n                <label \r\n                    className = \"fieldLabel\" \r\n                    htmlFor = { inputId } \r\n                >\r\n                    { this.props.fieldTitle }\r\n                </label>\r\n\r\n                <input\r\n                    id =          { inputId } \r\n                    className =   { \"inputField \" + this.inputAppearance() } \r\n                    name =        { this.props.name } \r\n                    type =        \"text\" \r\n                    placeholder = { this.props.fieldTitle } \r\n                    value =       { this.props.value } \r\n                    maxLength =   { MAX_TOTAL_LENGTH } \r\n                    disabled =    { this.props.disabled } \r\n                    required =    { this.props.required } \r\n\r\n                    onChange = { (event) => {\r\n                        this.checkHostname(event.target.value);\r\n                    } } \r\n                />\r\n\r\n                <HostnameErrors \r\n                    inputId =        { inputId } \r\n                    inputName =      { this.props.name } \r\n                    fieldTitle =     { this.props.fieldTitle } \r\n                    maxTotalLength = { MAX_TOTAL_LENGTH } \r\n                    maxLabelLength = { MAX_LABEL_LENGTH } \r\n                    hostnameErrors = { this.state[ ERROR_OBJ_KEY ] } \r\n                    errorRefresh =   { this.props.errorRefresh } \r\n                />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HostnameInput;","/* Core React import section */\r\nimport React from \"react\";\r\n\r\n/* Custom Components import section */\r\n\r\nclass DhcpCheckbox extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            checked: this.props.checked \r\n        };\r\n    }\r\n\r\n    render() {\r\n\r\n        const inputId = this.props.name + \"Checkbox\";\r\n\r\n        return (\r\n            <div className = \"inputContainer\"> \r\n                <label \r\n                    className = \"checkboxContainer\" \r\n                    htmlFor = { inputId } \r\n                > \r\n                    <input \r\n                        id = { inputId } \r\n                        className = \"preventSelection\" \r\n                        name = { this.props.name } \r\n                        type = \"checkbox\" \r\n                        value = { this.props.name } \r\n                        disabled = { this.props.disabled } \r\n                        checked = { this.state.checked } \r\n\r\n                        onChange = { (event) => { \r\n\r\n                            this.setState({ \r\n                                checked: event.target.checked \r\n                            });\r\n\r\n                            this.props.onChange(\r\n                                event.target.checked \r\n                            );\r\n                        } } \r\n                    /> \r\n\r\n                    <span \r\n                        id = { this.props.name + \"Button\" } \r\n                        className = \"customCheckbox\" \r\n                    /> \r\n\r\n                    { this.props.fieldTitle } \r\n                </label> \r\n            </div> \r\n        );\r\n    }\r\n}\r\n\r\nexport default DhcpCheckbox;","/* Core React import section */\r\nimport React from 'react';\r\n\r\n/* Custom Component import section */\r\n\r\n\r\nclass IpRadioButtons extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        const IPV4_VALUE = \"ipv4\", IPV6_VALUE = \"ipv6\";\r\n        const IPV4_MAPPED_VALUE = \"ipv4MappedIpv6\";\r\n        const CHECKED_ENDING = \"Checked\";\r\n\r\n        super(props);\r\n\r\n        this.state = { \r\n            [ IPV4_VALUE + CHECKED_ENDING ]: true, \r\n            [ IPV6_VALUE + CHECKED_ENDING ]: false, \r\n            [ IPV4_MAPPED_VALUE + CHECKED_ENDING ]: false, \r\n            hasError: false, \r\n            errorExit: false, \r\n            isEmpty: false, \r\n            tooShort: false, \r\n            tooLong: false, \r\n        };\r\n    }\r\n\r\n    render() {\r\n\r\n        const BUTTON_CONT_ENDING = \"RadioContainer\";\r\n        const RADIO_BUTTON_ENDING = \"RadioButton\";\r\n        const CUSTOM_RADIO_ENDING = \"CustomRadio\";\r\n        const CHECKED_ENDING = \"Checked\";\r\n        const IP_RADIO_NAME = \"ipType\";\r\n\r\n        const IPV4_RADIO_VALUE = \"ipv4\";\r\n        const IPV4_CHECKED = IPV4_RADIO_VALUE + CHECKED_ENDING;\r\n\r\n        const IPV6_RADIO_VALUE = \"ipv6\";\r\n        const IPV6_CHECKED = IPV6_RADIO_VALUE + CHECKED_ENDING;\r\n        \r\n        const IPV4_MAPPED_RADIO_VALUE = \"ipv4MappedIpv6\";\r\n        const IPV4_MAPPED_CHECKED = IPV4_MAPPED_RADIO_VALUE + CHECKED_ENDING;\r\n\r\n        return (\r\n            <div \r\n                id = { IP_RADIO_NAME + \"RadioContainer\" } \r\n                className = \"radioButtonsContainer\" \r\n            >\r\n                <label \r\n                    id = { IP_RADIO_NAME + \"FieldLabel\" } \r\n                    className = \"fieldLabel\" \r\n                    htmlFor = { IP_RADIO_NAME + \"Wrapper\" } \r\n                >\r\n                    Select IP address type: \r\n                </label>\r\n\r\n                <div \r\n                    id = { IP_RADIO_NAME + \"Wrapper\" } \r\n                    className = \"radioOptionsWrapper\" \r\n                >\r\n                    <label \r\n                        id = { IPV4_RADIO_VALUE + BUTTON_CONT_ENDING } \r\n                        className = \"radioOptionContainer preventSelection\" \r\n                        htmlFor = { IPV4_RADIO_VALUE + RADIO_BUTTON_ENDING } \r\n                    >\r\n                        <input \r\n                            id = { IPV4_RADIO_VALUE + RADIO_BUTTON_ENDING } \r\n                            type = \"radio\" \r\n                            name = { IP_RADIO_NAME } \r\n                            value = { IPV4_RADIO_VALUE } \r\n                            disabled = { this.props.disabled } \r\n                            defaultChecked = { \r\n                                this.state[ IPV4_CHECKED ] \r\n                            } \r\n\r\n                            onChange = { (event) => { \r\n                                this.setState({ \r\n                                    [ IPV4_CHECKED ]: event.target.checked \r\n                                });\r\n\r\n                                this.props.onChange( \r\n                                    IPV4_CHECKED, event.target.checked \r\n                                );\r\n                            } } \r\n                        />\r\n\r\n                        <span \r\n                            id = { IPV4_RADIO_VALUE + CUSTOM_RADIO_ENDING } \r\n                            className = \"customRadioBubble\" \r\n                        />\r\n\r\n                        IPv4\r\n                    </label>\r\n\r\n                    <label \r\n                        id = { IPV6_RADIO_VALUE + BUTTON_CONT_ENDING } \r\n                        className = \"radioOptionContainer preventSelection\" \r\n                        htmlFor = { IPV6_RADIO_VALUE + RADIO_BUTTON_ENDING }\r\n                    >\r\n                        <input \r\n                            id = { IPV6_RADIO_VALUE + RADIO_BUTTON_ENDING } \r\n                            type = \"radio\" \r\n                            name = { IP_RADIO_NAME } \r\n                            value = { IPV6_RADIO_VALUE } \r\n                            disabled = { this.props.disabled } \r\n                            defaultChecked = { \r\n                                this.state[ IPV6_CHECKED ] \r\n                            } \r\n\r\n                            onChange = { (event) => { \r\n                                this.setState({ \r\n                                    [ IPV6_CHECKED ]: event.target.checked \r\n                                });\r\n\r\n                                this.props.onChange( \r\n                                    IPV6_CHECKED, event.target.checked \r\n                                );\r\n                            } } \r\n                        />\r\n\r\n                        <span \r\n                            id = { IPV6_RADIO_VALUE + CUSTOM_RADIO_ENDING } \r\n                            className = \"customRadioBubble\" \r\n                        />\r\n\r\n                        IPv6\r\n                    </label>\r\n                    \r\n                    <label \r\n                        id = { IPV4_MAPPED_RADIO_VALUE + BUTTON_CONT_ENDING } \r\n                        className = \"radioOptionContainer preventSelection\" \r\n                        htmlFor = { \r\n                            IPV4_MAPPED_RADIO_VALUE + RADIO_BUTTON_ENDING \r\n                        } \r\n                    >\r\n                        <input \r\n                            id = { \r\n                                IPV4_MAPPED_RADIO_VALUE + RADIO_BUTTON_ENDING \r\n                            } \r\n                            type = \"radio\" \r\n                            name = { IP_RADIO_NAME } \r\n                            value = { IPV4_MAPPED_RADIO_VALUE } \r\n                            disabled = { this.props.disabled } \r\n                            defaultChecked = { \r\n                                this.state[ IPV4_MAPPED_CHECKED ] \r\n                            } \r\n\r\n                            onChange = { (event) => { \r\n                                this.setState({ \r\n                                    [ IPV4_MAPPED_CHECKED ]: \r\n                                        event.target.checked \r\n                                });\r\n\r\n                                this.props.onChange( \r\n                                    IPV4_MAPPED_CHECKED, event.target.checked \r\n                                );\r\n                            } } \r\n                        />\r\n\r\n                        <span \r\n                            id = { \r\n                                IPV4_MAPPED_RADIO_VALUE + CUSTOM_RADIO_ENDING \r\n                            } \r\n                            className = \"customRadioBubble\" \r\n                        />\r\n\r\n                        IPv4-Mapped IPv6\r\n                    </label>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default IpRadioButtons;","/* Core React import section */\r\nimport React from \"react\";\r\n\r\nclass Ipv4SingleOctetError extends React.Component {\r\n\r\n    render() {\r\n\r\n        const DISPLAY_VALUE = \"list-item\";\r\n\r\n        return (\r\n            <ul \r\n                id = { this.props.name + \"ErrorList\" } \r\n                className = \"fieldErrorList\" \r\n                \r\n                style = { \r\n                    this.props.octetError.hasError \r\n                        ? { display: \"inline-block\" } \r\n                        : { display: \"none\" } \r\n                }\r\n            >\r\n                { this.props.label }:\r\n\r\n                <li \r\n                    id = { this.props.name + \"RequiredError\" } \r\n                    style = { \r\n                        this.props.octetError.isEmpty  \r\n                            ? { display: DISPLAY_VALUE } \r\n                            : { display: \"none\" } \r\n                    }\r\n                >\r\n                    is required. \r\n                </li>\r\n\r\n                <li \r\n                    id = { this.props.name + \"TooLongError\" } \r\n                    style = { \r\n                        this.props.octetError.tooLong \r\n                            ? { display: DISPLAY_VALUE } \r\n                            : { display: \"none\" } \r\n                    }\r\n                >\r\n                    can be at most { this.props.maxLength } characters in \r\n                    length. \r\n                </li> \r\n\r\n                <li \r\n                    id = { this.props.name + \"OnlyDigitsError\" } \r\n                    style = { \r\n                        this.props.octetError.nonDigit  \r\n                            ? { display: DISPLAY_VALUE } \r\n                            : { display: \"none\" } \r\n                    }\r\n                >\r\n                    can only contain digits (0-9). \r\n                </li> \r\n\r\n                <li \r\n                    id = { this.props.name + \"TooLargeError\" } \r\n                    style = { \r\n                        this.props.octetError.tooLarge \r\n                            ? { display: DISPLAY_VALUE } \r\n                            : { display: \"none\" } \r\n                    }\r\n                >\r\n                    cannot be larger than { this.props.maxNum }. \r\n                </li> \r\n\r\n                <li \r\n                    id = { this.props.name + \"PrivateRangeError\" } \r\n                    style = { \r\n                        this.props.octetError.notPrivate \r\n                            ? { display: DISPLAY_VALUE } \r\n                            : { display: \"none\" } \r\n                    }\r\n                >\r\n                    must belong to a private IP address range. \r\n                </li>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ipv4SingleOctetError;\r\n","/* Core React import section */\r\nimport React from \"react\";\r\n\r\n/* Custom Component import section */\r\nimport Ipv4SingleOctetError from \"./Ipv4SingleOctetError\";\r\n\r\nclass Ipv4AllOctetErrors extends React.Component {\r\n    \r\n    errorAppearance() {\r\n\r\n        if ( this.props.errorExit ) {\r\n\r\n            return \"fieldErrorExit\";\r\n        }\r\n        \r\n        if ( this.props.hasError ) {\r\n\r\n            return \"fieldErrorAppear\";\r\n        }\r\n        \r\n        return \"hideInput\";\r\n    }\r\n\r\n    octetErrorList() {\r\n\r\n        const ipv4OctetErrors = new Array( this.props.numOctets );\r\n        const dateStr = String( (new Date()).getTime() );\r\n\r\n        for ( let index = 1; index <= this.props.numOctets; index++ ) {\r\n\r\n            ipv4OctetErrors[ index - 1 ] = (\r\n                <Ipv4SingleOctetError \r\n                    name = { \r\n                        this.props.inputName + \"-Octet\" + index + \"-\" \r\n                    } \r\n                    \r\n                    label =      { \"Octet \" + index } \r\n                    maxLength =  { this.props.maxLength } \r\n                    maxNum =     { this.props.maxNum } \r\n                    octetError = { this.props[ \"octet\" + index + \"Error\" ] } \r\n                    key =        { dateStr + \"OctetError\" + index } \r\n                />\r\n            );\r\n        }\r\n\r\n        return ipv4OctetErrors;\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div  \r\n                id = { this.props.inputName + \"ErrorContainer\" } \r\n\r\n                className = { \"fieldErrorContainer\" + ( \r\n                    this.props.errorRefresh ? \" fieldErrorRefresh\" : \"\"   \r\n                ) }\r\n            >\r\n                <label \r\n                    id = { this.props.inputName + \"OctetErrors\" } \r\n\r\n                    className = { \r\n                        \"fieldErrorMessage \" + this.errorAppearance() \r\n                    } \r\n\r\n                    htmlFor = { this.props.inputId } \r\n                >\r\n                    { this.octetErrorList() }\r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ipv4AllOctetErrors;","/* Core React import section */\r\nimport React from \"react\";\r\n\r\n/* Custom Component import section */\r\n\r\nclass Ipv4CidrErrors extends React.Component {\r\n\r\n    errorAppearance() {\r\n\r\n        if ( this.props.errorExit ) {\r\n\r\n            return \"fieldErrorExit\";\r\n        }\r\n\r\n        if ( this.props.cidrErrors.hasError ) {\r\n\r\n            return \"fieldErrorAppear\";\r\n        }\r\n        \r\n        return \"hideInput\";\r\n    }\r\n\r\n    render() {\r\n\r\n        const ERROR_ITEM_CLASS = \"fieldErrorItem\";\r\n        const DISPLAY_VALUE = \"inline-block\";\r\n\r\n        return (\r\n            <div  \r\n                id = { this.props.inputName + \"-ErrorContainer\" } \r\n                className = { \"fieldErrorContainer\" + \r\n                    ( this.props.errorRefresh ? \" fieldErrorRefresh\" : \"\" ) \r\n                }\r\n            >\r\n                <label \r\n                    id = { this.props.inputName + \"-ErrorMessage\" } \r\n\r\n                    className = { \r\n                        \"fieldErrorMessage \" + this.errorAppearance() \r\n                    }\r\n\r\n                    htmlFor = { this.props.inputId } \r\n                >\r\n                    <strong \r\n                        id = { this.props.inputName + \"-Required-Error\" } \r\n                        className = { ERROR_ITEM_CLASS } \r\n                        style = { \r\n                            this.props.cidrErrors.isEmpty \r\n                                ? { display: DISPLAY_VALUE } \r\n                                : { display: \"none\" } \r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } is required.\r\n                    </strong>\r\n\r\n                    <strong \r\n                        id = { this.props.inputName + \"-CharLength-Error\" } \r\n                        className = { ERROR_ITEM_CLASS } \r\n                        style = { \r\n                            this.props.cidrErrors.tooManyChar \r\n                                ? { display: DISPLAY_VALUE } \r\n                                : { display: \"none\" } \r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } can be at \r\n                        most { this.props.maxLength } digits in length. \r\n                    </strong>\r\n\r\n                    <strong \r\n                        id = { this.props.inputName + \"-NonDigit-Error\" } \r\n                        className = { ERROR_ITEM_CLASS } \r\n                        style = { \r\n                            this.props.cidrErrors.nonDigit  \r\n                                ? { display: DISPLAY_VALUE } \r\n                                : { display: \"none\" } \r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } can only contain digits \r\n                        (0-9). \r\n                    </strong> \r\n\r\n                    <strong \r\n                        id = { this.props.inputName + \"-NumTooLarge-Error\" } \r\n                        className = { ERROR_ITEM_CLASS } \r\n                        style = { \r\n                            this.props.cidrErrors.numTooLarge \r\n                                ? { display: DISPLAY_VALUE } \r\n                                : { display: \"none\" } \r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } cannot be larger \r\n                        than { this.props.maxNum }.\r\n                    </strong> \r\n\r\n                    <strong \r\n                        id = { this.props.inputName + \"-RangeTooLarge-Error\" } \r\n                        className = { ERROR_ITEM_CLASS } \r\n                        style = { \r\n                            this.props.cidrErrors.rangeTooLarge \r\n                                ? { display: DISPLAY_VALUE } \r\n                                : { display: \"none\" } \r\n                        }\r\n                    >\r\n                        { this.props.fieldTitle } specifies too large an IP \r\n                        address range. \r\n                    </strong> \r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ipv4CidrErrors;","/* Core React import section */\r\nimport React from \"react\";\r\n\r\n/* Custom Components import section */\r\nimport Ipv4AllOctetErrors from \"../errors/Ipv4AllOctetErrors\";\r\nimport Ipv4CidrErrors     from \"../errors/Ipv4CidrErrors\";\r\n\r\nclass Ipv4Input extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        const ERROR_ENDING = \"Error\", ERROR_EXIT_ENDING = \"ErrorExit\";\r\n        const OCTET_NAME = \"octet\", CIDR_NAME = \"cidr\";\r\n        this.state = {};\r\n\r\n        for ( let index = 1; index <= this.props.numOctets; index++ ) {\r\n\r\n            this.state[ OCTET_NAME + index ] = \"\";\r\n\r\n            this.state[ OCTET_NAME + index + ERROR_ENDING ] = {\r\n                hasError: false, \r\n                isEmpty: false, \r\n                tooLong: false, \r\n                nonDigit: false, \r\n                tooLarge: false, \r\n                notPrivate: false \r\n            };\r\n        }\r\n\r\n        this.state[ OCTET_NAME + ERROR_EXIT_ENDING ] = false;\r\n        this.state[ CIDR_NAME ] = \"\";\r\n\r\n        this.state[ CIDR_NAME + ERROR_ENDING ] = {\r\n            hasError: false, \r\n            isEmpty: false, \r\n            tooManyChar: false, \r\n            nonDigit: false, \r\n            numTooLarge: false, \r\n            rangeTooLarge: false \r\n        };\r\n\r\n        this.state[ CIDR_NAME + ERROR_EXIT_ENDING ] = false;\r\n    }\r\n\r\n    isPressedKeyDigit = (event) => {\r\n\r\n        let key = event.key || event.which || event.charCode || event.keyCode;\r\n        const isString = typeof key === \"string\";\r\n\r\n        if (isString) {\r\n\r\n            key = key.toLowerCase();\r\n        }\r\n\r\n        switch (key) {\r\n\r\n            case 8:  // Backspace key \r\n            case 9:  // Tab key \r\n            case 35: // End key \r\n            case 36: // Home key \r\n            case 37: // Left arrow key \r\n            case 39: // Right arrow key \r\n            case 46: // Delete key \r\n            case \"arrowleft\":\r\n            case \"arrowright\":\r\n            case \"backspace\":\r\n            case \"del\":\r\n            case \"delete\":\r\n            case \"end\":\r\n            case \"home\":\r\n            case \"left\":\r\n            case \"right\":\r\n            case \"tab\": \r\n                return true;\r\n\r\n            default: \r\n                    \r\n                if (isString) {\r\n\r\n                    if ( /^\\d$/.test(key) ) {\r\n\r\n                        return true;\r\n                    }\r\n\r\n                    event.preventDefault();\r\n                    return false;\r\n                }\r\n                \r\n                if ( key >= 48 && key <= 57 ) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                event.preventDefault();\r\n                return false;\r\n        }\r\n    }\r\n\r\n    checkOctetValue( event, propName, octetIndex, returnErrorObj ) {\r\n\r\n        const OCTET_MAX_LENGTH = 3, OCTET_MAX_NUM = 255, OCTET_MAX_STR = \"255\";\r\n        const ERROR_ENDING = \"Error\";\r\n\r\n        const errorObj = {\r\n            isEmpty: !event || !event.target || !event.target.value, \r\n        };\r\n\r\n        let strVal;\r\n\r\n        if ( errorObj.isEmpty ) {\r\n\r\n            errorObj.tooLong = errorObj.nonDigit = errorObj.tooLarge = false;\r\n            strVal = \"\";\r\n        }\r\n        else {\r\n\r\n            strVal = event.target.value;\r\n            errorObj.tooLong = strVal.length > OCTET_MAX_LENGTH;\r\n\r\n            if ( errorObj.tooLong ) {\r\n\r\n                strVal = strVal.substring(0, OCTET_MAX_LENGTH);\r\n            }\r\n\r\n            errorObj.nonDigit = /[^\\d]/.test(strVal);\r\n\r\n            if ( errorObj.nonDigit ) {\r\n\r\n                errorObj.tooLarge = false;\r\n            }\r\n            else {\r\n\r\n                const numVal = Number( strVal );\r\n                errorObj.tooLarge = numVal > OCTET_MAX_NUM;\r\n                strVal = errorObj.tooLarge ? OCTET_MAX_STR : String( numVal );\r\n            }\r\n        }\r\n\r\n        this.checkCidrOnOctetChange();\r\n\r\n        if ( returnErrorObj ) {\r\n\r\n            return [ strVal, errorObj ];\r\n        }\r\n\r\n        errorObj.notPrivate = false;\r\n\r\n        errorObj.hasError = errorObj.isEmpty || errorObj.tooLong \r\n            || errorObj.nonDigit || errorObj.tooLarge;\r\n        \r\n        const exitVal = this.checkOctetErrorExit( \r\n            errorObj.hasError, octetIndex \r\n        );\r\n\r\n        this.setState({\r\n            [ propName ]: strVal, \r\n            [ propName + ERROR_ENDING ]: errorObj, \r\n            octetErrorExit: exitVal \r\n        });\r\n\r\n        return [ null, null ];\r\n    }\r\n\r\n    checkCidrOnOctetChange() {\r\n\r\n        const ERROR_ENDING = \"Error\", ERROR_EXIT_ENDING = \"ErrorExit\";\r\n        const CIDR_NAME = \"cidr\", CIDR_ERROR = CIDR_NAME + ERROR_ENDING;\r\n        const CIDR_ERROR_EXIT = CIDR_NAME + ERROR_EXIT_ENDING;\r\n        const HAS_ERROR_PROP = \"hasError\";\r\n        const cidrVal = this.state[ CIDR_NAME ];\r\n\r\n        if ( !cidrVal ) {\r\n\r\n            return;\r\n        }\r\n\r\n        const cidrErrorObj = this.state[ CIDR_ERROR ];\r\n        cidrErrorObj.rangeTooLarge = this.checkCidrSum( cidrVal );\r\n        const hadError = this.state[ HAS_ERROR_PROP ];\r\n        let currentError = false;\r\n\r\n        for ( let prop in cidrErrorObj ) {\r\n\r\n            if ( prop !== HAS_ERROR_PROP ) {\r\n\r\n                currentError = currentError || cidrErrorObj[prop];\r\n            }\r\n        }\r\n\r\n        cidrErrorObj[ HAS_ERROR_PROP ] = currentError;\r\n        const exitVal = hadError && !currentError;\r\n\r\n        this.setState({\r\n            [ CIDR_ERROR ]: cidrErrorObj, \r\n            [ CIDR_ERROR_EXIT ]: exitVal \r\n        });\r\n    }\r\n\r\n    checkOctet1Value( event, octet1Prop, octet2Prop ) {\r\n        \r\n        const [ strVal, errorObj ] = this.checkOctetValue( \r\n            event, octet1Prop, 1, this.props.onlyPrivate  \r\n        );\r\n\r\n        if ( this.props.onlyPrivate && typeof strVal === \"string\" ) {\r\n\r\n            const octet2Val = this.state[ octet2Prop ];\r\n\r\n            if ( octet2Val ) {\r\n\r\n                const ipRegex = new RegExp( \r\n                    \"^0[\\\\d]{1,3}$\" \r\n                    + \"|^10[\\\\d]{1,3}$\" \r\n                    + \"|^1006[4-9]$|^100[7-9]\\\\d$|^1001[0-1]\\\\d$|^10012[0-7]$\" \r\n                    + \"|^127[\\\\d]{1,3}$\" \r\n                    + \"|^169254$\" \r\n                    + \"|^1721[6-9]$|^1722\\\\d$|^1723[0-1]$\" \r\n                    + \"|^192168$\" \r\n                    + \"|^1981[8-9]$\" \r\n                );\r\n\r\n                errorObj.notPrivate = !ipRegex.test( strVal + octet2Val );\r\n            }\r\n            else {\r\n\r\n                const ipRegex = new RegExp(\r\n                    \"^0$|^10$|^100$|^127$|^169$|^172$|^192$|^198$\"\r\n                );\r\n\r\n                errorObj.notPrivate = !ipRegex.test(strVal);\r\n            }\r\n            \r\n            errorObj.hasError = errorObj.isEmpty || errorObj.tooLong \r\n                || errorObj.nonDigit || errorObj.tooLarge \r\n                || errorObj.notPrivate;\r\n\r\n            const exitVal = this.checkOctetErrorExit( errorObj.hasError, 1 );\r\n\r\n            this.setState({\r\n                [ octet1Prop ]: strVal, \r\n                [ octet1Prop + \"Error\" ]: errorObj, \r\n                octetErrorExit: exitVal \r\n            });\r\n        }\r\n    }\r\n\r\n    checkOctet2Value( event, octet1Prop, octet2Prop ) {\r\n\r\n        const [ strVal, errorObj ] = this.checkOctetValue( \r\n            event, octet2Prop, 2, this.props.onlyPrivate  \r\n        );\r\n\r\n        if ( this.props.onlyPrivate && typeof strVal === \"string\" ) { \r\n             \r\n            if ( this.state[ octet1Prop ] && strVal ) {\r\n\r\n                const ipRegex = new RegExp( \r\n                    \"^0[\\\\d]{1,3}$\" \r\n                    + \"|^10[\\\\d]{1,3}$\" \r\n                    + \"|^1006[4-9]$|^100[7-9]\\\\d$|^1001[0-1]\\\\d$|^10012[0-7]$\" \r\n                    + \"|^127[\\\\d]{1,3}$\" \r\n                    + \"|^169254$\" \r\n                    + \"|^1721[6-9]$|^1722\\\\d$|^1723[0-1]$\" \r\n                    + \"|^192168$\" \r\n                    + \"|^1981[8-9]$\" \r\n                );\r\n\r\n                const ipStart = this.state[ octet1Prop ] + strVal;\r\n                errorObj.notPrivate = !ipRegex.test( ipStart );\r\n\r\n                errorObj.hasError = errorObj.isEmpty || errorObj.tooLong \r\n                    || errorObj.nonDigit || errorObj.tooLarge \r\n                    || errorObj.notPrivate;\r\n            }\r\n            else {\r\n\r\n                errorObj.notPrivate = false;\r\n                errorObj.hasError = errorObj.isEmpty || errorObj.tooLong \r\n                    || errorObj.nonDigit || errorObj.tooLarge;\r\n            }\r\n\r\n            const exitVal = this.checkOctetErrorExit( errorObj.hasError, 2 );\r\n\r\n            this.setState({\r\n                [ octet2Prop ]: strVal, \r\n                [ octet2Prop + \"Error\" ]: errorObj, \r\n                octetErrorExit: exitVal \r\n            });\r\n        }\r\n    }\r\n\r\n    checkOctetErrorExit( octetHasError, octetIndex ) {\r\n\r\n        const OCTET_NAME = \"octet\", ERROR_ENDING = \"Error\";\r\n        const HAS_ERROR_PROP = \"hasError\";\r\n        let prevError = false, currentError = false;\r\n\r\n        for ( let index = 1; index <= this.props.numOctets; index++ ) {\r\n\r\n            const errorProp = OCTET_NAME + index + ERROR_ENDING;\r\n            const indexError = this.state[ errorProp ][ HAS_ERROR_PROP ];\r\n\r\n            currentError = currentError || ( index === octetIndex \r\n                ? octetHasError : indexError );\r\n            prevError = prevError || indexError;\r\n        }\r\n\r\n        return prevError && !currentError;\r\n    }\r\n\r\n    checkCidrValue(event) {\r\n\r\n        const CIDR_MAX_LENGTH = 2, CIDR_MAX_NUM = 32, CIDR_MAX_STR = \"32\";\r\n        const errorObj = {}, CIDR_PROP = \"cidr\";\r\n\r\n        errorObj.isEmpty = this.props.cidrRequired  \r\n            && ( !event || !event.target || !event.target.value );\r\n\r\n        let strVal;\r\n\r\n        if ( errorObj.isEmpty ) {\r\n\r\n            errorObj.tooManyChar = errorObj.nonDigit = false;\r\n            errorObj.numTooLarge = false;\r\n            strVal = \"\";\r\n        }\r\n        else {\r\n\r\n            strVal = event.target.value;\r\n            errorObj.tooManyChar = strVal.length > CIDR_MAX_LENGTH;\r\n\r\n            if ( errorObj.tooManyChar ) {\r\n\r\n                strVal = strVal.substring( 0, CIDR_MAX_LENGTH );\r\n            }\r\n\r\n            errorObj.nonDigit = /[^\\d]/.test(strVal);\r\n\r\n            if ( errorObj.nonDigit || !strVal ) {\r\n\r\n                errorObj.numTooLarge = false;\r\n            }\r\n            else {\r\n\r\n                const numVal = Number( strVal );\r\n                errorObj.numTooLarge = numVal > CIDR_MAX_NUM;\r\n                strVal = errorObj.numTooLarge ? CIDR_MAX_STR \r\n                    : String( numVal );\r\n            }\r\n        }\r\n\r\n        errorObj.rangeTooLarge = this.checkCidrSum( strVal );\r\n\r\n        errorObj.hasError = errorObj.isEmpty || errorObj.tooManyChar \r\n            || errorObj.nonDigit || errorObj.numTooLarge \r\n            || errorObj.rangeTooLarge;\r\n        \r\n        const errorProp = CIDR_PROP + \"Error\";\r\n        const errorExit = CIDR_PROP + \"ErrorExit\";\r\n        const exitVal = this.state[ errorProp ].hasError && !errorObj.hasError;\r\n\r\n        this.setState({\r\n            [ CIDR_PROP ]: strVal, \r\n            [ errorProp ]: errorObj, \r\n            [ errorExit ]: exitVal \r\n        });\r\n    }\r\n\r\n    checkCidrSum( cidrStr ) {\r\n\r\n        if ( !cidrStr ) {\r\n\r\n            return false;\r\n        }\r\n\r\n        const cidrPower = Number(cidrStr);\r\n\r\n        if ( isNaN(cidrPower) ) {\r\n\r\n            return false;\r\n        }\r\n\r\n        const OCTET_MAX = 255, OCTET_NAME = \"octet\";\r\n        const IPV4_MAX = 4294967296; // 255.255.255.255 as a Number \r\n        let hexStr = \"0x\", ipStr = \"\";\r\n\r\n        for ( let index = 1; index <= this.props.numOctets; index++ ) {\r\n\r\n            const octetProp = OCTET_NAME + index;\r\n            const octetVal = this.state[ octetProp ];\r\n\r\n            if ( octetVal && /^\\d{1,3}$/.test( octetVal ) ) {\r\n\r\n                const numEntry = Number( octetVal );\r\n\r\n                if ( numEntry > OCTET_MAX ) {\r\n\r\n                    return false;\r\n                }\r\n\r\n                const hexEntry = numEntry.toString(16);\r\n                hexStr += hexEntry.length === 2 ? hexEntry : \"0\" + hexEntry;\r\n                ipStr += octetVal;\r\n                \r\n                if ( index < this.props.numOctets ) {\r\n\r\n                    ipStr += \".\";\r\n                }\r\n            }\r\n            else {\r\n\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        const ipNum = parseInt( hexStr, 16 );\r\n        const cidrNum = Math.pow( 2, 32 - cidrPower );\r\n        let ipMax = IPV4_MAX;\r\n\r\n        if ( this.props.onlyPrivate ) {\r\n\r\n            if ( /^0./.test(ipStr) ) {\r\n\r\n                ipMax = 16777215; // 0.255.255.255 as a Number \r\n            }\r\n            else if ( /^10./.test(ipStr) ) {\r\n\r\n                ipMax = 184549375; // 10.255.255.255 as a Number \r\n            }\r\n            else if ( /^100./.test(ipStr) ) {\r\n\r\n                ipMax = 1686110207; // 100.127.255.255 as a Number \r\n            }\r\n            else if ( /^127./.test(ipStr) ) {\r\n\r\n                ipMax = 2147483647; // 127.255.255.255 as a Number \r\n            }\r\n            else if ( /^169.254./ ) {\r\n\r\n                ipMax = 2852061183; // 169.254.255.255 as a Number \r\n            }\r\n            else if ( /^172.1[6-9]|^172.2\\d.|^173.3[0-1]/.test(ipStr) ) {\r\n\r\n                ipMax = 2887778303; // 172.31.255.255 as a Number \r\n            }\r\n            else if ( /^192.168./.test(ipStr) ) {\r\n\r\n                ipMax = 3232301055; // 192.168.255.255 as a Number \r\n            }\r\n            else if ( /^198.1[8-9]./.test(ipStr) ) {\r\n\r\n                ipNum = 3323199487; // 198.19.255.255 as a Number \r\n            }\r\n        }\r\n\r\n        return ipNum + cidrNum > ipMax;\r\n    }\r\n\r\n    render() {\r\n\r\n        // Figure out why octet inputs only accept one digit key input before \r\n        // losing focus. \r\n        const OCTET_MAX_LENGTH = 3, OCTET_MAX_NUM = 255;\r\n        const OCTET_LOWER = \"octet\", OCTET_UPPER = \"Octet\";\r\n        const INPUT_ENDING = \"InputField\";\r\n        const CIDR_MAX_LENGTH = 2, CIDR_MAX_NUM = 32; \r\n\r\n        const OCTET_1_PROP = OCTET_LOWER + \"1\";\r\n        const OCTET_2_PROP = OCTET_LOWER + \"2\";\r\n        const OCTET_3_PROP = OCTET_LOWER + \"3\";\r\n        const OCTET_4_PROP = OCTET_LOWER + \"4\";\r\n\r\n        const OCTET_1_NAME = this.props.name + OCTET_UPPER + \"1\";\r\n        const OCTET_2_NAME = this.props.name + OCTET_UPPER + \"2\";\r\n        const OCTET_3_NAME = this.props.name + OCTET_UPPER + \"3\";\r\n        const OCTET_4_NAME = this.props.name + OCTET_UPPER + \"4\";\r\n\r\n        const LABEL_CLASS_NAME = \"fieldLabel\";\r\n        const PERIOD_CLASS_NAME = \"labelBetweenText\";\r\n        const OCTET_CLASS_NAME = \"octetInputField\";\r\n        const HALF_INPUT_CLASS = \"halfInputField\";\r\n        const SMALL_COLOR_CLASS = \"smallInputColors\";\r\n        const INVALID_CLASS_NAME = \"invalidInput\";\r\n        const OCTET_INPUT_TYPE = \"text\";\r\n\r\n        const CIDR_LOWER = \"cidr\", CIDR_UPPER = \"Cidr\";\r\n        const CIDR_NAME = this.props.name + \"CidrRange\";\r\n        const CIDR_ID = CIDR_NAME + INPUT_ENDING;\r\n\r\n        const OCTET_1_PLACEHOLDER = OCTET_UPPER + \" 1\";\r\n        const OCTET_2_PLACEHOLDER = OCTET_UPPER + \" 2\";\r\n        const OCTET_3_PLACEHOLDER = OCTET_UPPER + \" 3\";\r\n        const OCTET_4_PLACEHOLDER = OCTET_UPPER + \" 4\";\r\n        const CIDR_PLACEHOLDER = \"CIDR\";\r\n\r\n        const ERROR_ENDING = \"Error\", HAS_ERROR_PROP = \"hasError\";\r\n        const ERROR_EXIT_ENDING = \"ErrorExit\";\r\n\r\n        const OCTET_1_ERROR = OCTET_1_PROP + ERROR_ENDING;\r\n        const OCTET_2_ERROR = OCTET_2_PROP + ERROR_ENDING;\r\n        const OCTET_3_ERROR = OCTET_3_PROP + ERROR_ENDING;\r\n        const OCTET_4_ERROR = OCTET_4_PROP + ERROR_ENDING;\r\n        const OCTET_ERROR_EXIT = OCTET_LOWER + ERROR_EXIT_ENDING;\r\n\r\n        const CIDR_ERROR = CIDR_LOWER + ERROR_ENDING;\r\n        const CIDR_ERROR_EXIT = CIDR_LOWER + ERROR_EXIT_ENDING;\r\n        \r\n        const OCTET_WRAPPER_ID = this.props.name + \"OctetWrapper\";\r\n\r\n        return (\r\n            <div \r\n                id = { this.props.name + \"InputContainer\" } \r\n                className = { \"toggleContainer subContainerSizing \" + (\r\n                    this.props.typeChecked ? \"\" : \" toggleDisappearance\" \r\n                ) }\r\n            >\r\n                <label \r\n                    id = { this.props.name + \"FieldLabel\" } \r\n                    className = { LABEL_CLASS_NAME } \r\n                    htmlFor = { this.props.name + \"OctetWrapper\" } \r\n                >\r\n                    Enter each octet of { this.props.fieldTitle } here: \r\n                </label> \r\n\r\n                <div \r\n                    id = { OCTET_WRAPPER_ID } \r\n                    className = \"octetInputWrapper\" \r\n                >\r\n                    <input \r\n                        id = { this.props.name + INPUT_ENDING } \r\n\r\n                        className = { OCTET_CLASS_NAME + \" \" + (\r\n                            this.state[ OCTET_1_ERROR ][ HAS_ERROR_PROP ] \r\n                                ? INVALID_CLASS_NAME \r\n                                : SMALL_COLOR_CLASS \r\n                        ) } \r\n\r\n                        type =        { OCTET_INPUT_TYPE } \r\n                        name =        { OCTET_1_NAME } \r\n                        placeholder = { OCTET_1_PLACEHOLDER } \r\n                        maxLength =   { OCTET_MAX_LENGTH } \r\n                        pattern =     { \"\\\\d{1,\" + OCTET_MAX_LENGTH + \"}\" } \r\n                        required =    { this.props.typeChecked } \r\n                        disabled =    { this.props.disabled } \r\n                        value =       { this.state[ OCTET_1_PROP ] } \r\n                        onKeyDown = { this.isPressedKeyDigit } \r\n\r\n                        onChange = { (event) => {\r\n                            this.checkOctet1Value( \r\n                                event, OCTET_1_PROP, OCTET_2_PROP \r\n                            );\r\n                        } } \r\n                    />\r\n\r\n                    <span \r\n                        id = { OCTET_LOWER + \"1Period\" } \r\n                        className = { PERIOD_CLASS_NAME } \r\n                    >\r\n                        .\r\n                    </span>\r\n\r\n                    <input \r\n                        id = { OCTET_2_NAME + INPUT_ENDING } \r\n\r\n                        className = { OCTET_CLASS_NAME + \" \" + (\r\n                            this.state[ OCTET_2_ERROR ][ HAS_ERROR_PROP ] \r\n                                ? INVALID_CLASS_NAME \r\n                                : SMALL_COLOR_CLASS \r\n                        ) } \r\n\r\n                        type =        { OCTET_INPUT_TYPE } \r\n                        name =        { this.props.name } \r\n                        placeholder = { OCTET_2_PLACEHOLDER } \r\n                        maxLength =   { OCTET_MAX_LENGTH } \r\n                        pattern =     { \"\\\\d{1,\" + OCTET_MAX_LENGTH + \"}\" } \r\n                        required =    { this.props.typeChecked } \r\n                        disabled =    { this.props.disabled } \r\n                        value =       { this.state[ OCTET_2_PROP ] } \r\n                        onKeyDown =   { this.isPressedKeyDigit } \r\n\r\n                        onChange = { (event) => {\r\n                            this.checkOctet2Value( \r\n                                event, OCTET_1_PROP, OCTET_2_PROP \r\n                            );\r\n                        } } \r\n                    /> \r\n\r\n                    <span \r\n                        id = { OCTET_LOWER + \"2Period\" } \r\n                        className = { PERIOD_CLASS_NAME } \r\n                    >\r\n                        .\r\n                    </span>\r\n\r\n                    <input \r\n                        id = { OCTET_3_NAME + INPUT_ENDING } \r\n\r\n                        className = { OCTET_CLASS_NAME + \" \" + (\r\n                            this.state[ OCTET_3_ERROR ][ HAS_ERROR_PROP ] \r\n                                ? INVALID_CLASS_NAME \r\n                                : SMALL_COLOR_CLASS \r\n                        ) } \r\n\r\n                        type =        { OCTET_INPUT_TYPE } \r\n                        name =        { OCTET_3_NAME } \r\n                        placeholder = { OCTET_3_PLACEHOLDER } \r\n                        maxLength =   { OCTET_MAX_LENGTH } \r\n                        pattern =     { \"\\\\d{1,\" + OCTET_MAX_LENGTH + \"}\" } \r\n                        required =    { this.props.typeChecked } \r\n                        disabled =    { this.props.disabled } \r\n                        value =       { this.state[ OCTET_3_PROP ] } \r\n                        onKeyDown =   { this.isPressedKeyDigit } \r\n\r\n                        onChange = { (event) => {\r\n                            this.checkOctetValue( event, OCTET_3_PROP, 3 );\r\n                        } } \r\n                    /> \r\n\r\n                    <span \r\n                        id = { OCTET_LOWER + \"3Period\" } \r\n                        className = { PERIOD_CLASS_NAME } \r\n                    >\r\n                        .\r\n                    </span>\r\n\r\n                    <input \r\n                        id = { OCTET_4_NAME + INPUT_ENDING } \r\n\r\n                        className = { OCTET_CLASS_NAME + \" \" + (\r\n                            this.state[ OCTET_4_ERROR ][ HAS_ERROR_PROP ] \r\n                                ? INVALID_CLASS_NAME \r\n                                : SMALL_COLOR_CLASS \r\n                        ) } \r\n\r\n                        type =        { OCTET_INPUT_TYPE } \r\n                        name =        { OCTET_4_NAME } \r\n                        placeholder = { OCTET_4_PLACEHOLDER } \r\n                        maxLength =   { OCTET_MAX_LENGTH } \r\n                        pattern =     { \"\\\\d{1,\" + OCTET_MAX_LENGTH + \"}\" } \r\n                        required =    { this.props.typeChecked } \r\n                        disabled =    { this.props.disabled } \r\n                        value =       { this.state[ OCTET_4_PROP ] } \r\n                        onKeyDown =   { this.isPressedKeyDigit } \r\n\r\n                        onChange = { (event) => {\r\n                            this.checkOctetValue( event, OCTET_4_PROP, 4 );\r\n                        } } \r\n                    /> \r\n\r\n                    <Ipv4AllOctetErrors \r\n                        inputName = { this.props.name } \r\n                        inputId =   { OCTET_WRAPPER_ID } \r\n                        numOctets = { this.props.numOctets } \r\n                        maxLength = { OCTET_MAX_LENGTH } \r\n                        maxNum =    { OCTET_MAX_NUM } \r\n\r\n                        hasError = { \r\n                            this.state[ OCTET_1_ERROR ][ HAS_ERROR_PROP ] \r\n                            || this.state[ OCTET_2_ERROR ][ HAS_ERROR_PROP ] \r\n                            || this.state[ OCTET_3_ERROR ][ HAS_ERROR_PROP ] \r\n                            || this.state[ OCTET_4_ERROR ][ HAS_ERROR_PROP ] \r\n                        } \r\n\r\n                        errorExit = { \r\n                            this.state[ OCTET_ERROR_EXIT ] \r\n                        } \r\n\r\n                        errorRefresh = { this.props.errorRefresh } \r\n                        octet1Error =  { this.state[ OCTET_1_ERROR ] } \r\n                        octet2Error =  { this.state[ OCTET_2_ERROR ] } \r\n                        octet3Error =  { this.state[ OCTET_3_ERROR ] } \r\n                        octet4Error =  { this.state[ OCTET_4_ERROR ] } \r\n                    />\r\n                </div>\r\n                \r\n                <div \r\n                    id = { this.props.name + CIDR_UPPER + \"Container\" } \r\n                    className = \"halfContainer\" \r\n                >\r\n                    <label \r\n                        id = { this.props.name + CIDR_UPPER + INPUT_ENDING } \r\n                        className = { LABEL_CLASS_NAME } \r\n                        htmlFor =   { CIDR_ID } \r\n                    >\r\n                        CIDR Range ({ \r\n                            this.props.cidrRequired ? \"Required\" : \"Optional\" \r\n                        }):\r\n                    </label>\r\n\r\n                    <input \r\n                        id = { CIDR_ID } \r\n\r\n                        className = { HALF_INPUT_CLASS + \" \" + (\r\n                            this.state[ CIDR_ERROR ][ HAS_ERROR_PROP ] \r\n                                ? INVALID_CLASS_NAME \r\n                                : SMALL_COLOR_CLASS \r\n                        ) } \r\n\r\n                        type =        \"text\" \r\n                        name =        { CIDR_NAME } \r\n                        placeholder = { CIDR_PLACEHOLDER } \r\n                        pattern =     { \"\\\\d{1,\" + CIDR_MAX_LENGTH + \"}\" } \r\n                        maxLength =   { CIDR_MAX_LENGTH } \r\n                        value =       { this.state[ CIDR_LOWER ] } \r\n                        required =    { this.props.cidrRequired } \r\n                        onKeyDown =   { this.isPressedKeyDigit } \r\n\r\n                        onChange = { (event) => {\r\n                            this.checkCidrValue(event); \r\n                        } } \r\n                    /> \r\n\r\n                    <Ipv4CidrErrors \r\n                        inputId =      { CIDR_ID } \r\n                        inputName =    { CIDR_NAME } \r\n                        fieldTitle =   { CIDR_PLACEHOLDER } \r\n                        maxLength =    { CIDR_MAX_LENGTH } \r\n                        maxNum =       { CIDR_MAX_NUM } \r\n                        cidrErrors =   { this.state[ CIDR_ERROR ] } \r\n                        errorExit =    { this.state[ CIDR_ERROR_EXIT ] } \r\n                        errorRefresh = { this.props.errorRefresh } \r\n                    />\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ipv4Input;","/* Core React import section */\r\nimport React from \"react\";\r\n\r\n/* Stylesheet import section */\r\n\r\n/* Custom Component import section */\r\nimport HostnameInput  from \"./inputs/HostnameInput\";\r\nimport FormCheckbox   from \"./inputs/FormCheckbox\";\r\nimport IpRadioButtons from \"./inputs/IpRadioButtons\";\r\nimport Ipv4Input      from \"./inputs/Ipv4Input\";\r\n\r\nclass Network extends React.Component {\r\n\r\n    constructor(props) {\r\n        \r\n        /* Passes the \"props\" object to the Component class constructor. */\r\n        super(props);\r\n\r\n        const HOSTNAME_NAME = \"hostname\", DHCP_NAME = \"dchp\";\r\n\r\n        const IP_CHECKBOX_NAME = \"privateIp\";\r\n        const IPV4_NAME = \"ipv4\";\r\n        const IPV6_NAME = \"ipv6\";\r\n        const IPV4_MAPPED_IPV6 = \"ipv4MappedIpv6\";\r\n\r\n        const CHECKED_ENDING = \"Checked\";\r\n        const IPV4_CHECKED = IPV4_NAME + CHECKED_ENDING;\r\n        const IPV6_CHECKED = IPV6_NAME + CHECKED_ENDING;\r\n        const IPV4_MAPPED_CHECKED = IPV4_MAPPED_IPV6 + CHECKED_ENDING;\r\n\r\n        const IP_NAME = \"ip\", NETMASK_NAME = \"netmask\";\r\n        const GATEWAY_NAME = \"gateway\";\r\n        const DNS1_NAME = \"dns1\", DNS2_NAME = \"dns2\";\r\n        const ERROR_ENDING = \"HasError\", REFRESH_ENDING = \"Refresh\";\r\n\r\n\r\n        this.state = {\r\n\r\n            /* Section declaring the state properties for storing the \"value\" \r\n             JavaScript property and HTML attribute of input elements of the \r\n             matching \"name\" attributes */\r\n            [ HOSTNAME_NAME ]: \"\", \r\n            [ DHCP_NAME ]:     false, \r\n            [ IP_NAME ]:       \"\", \r\n            [ NETMASK_NAME ]:  \"\", \r\n            [ GATEWAY_NAME ]:  \"\", \r\n            [ DNS1_NAME ]:     \"\", \r\n            [ DNS2_NAME ]:     \"\", \r\n\r\n            [ IPV4_CHECKED ]:        true, \r\n            [ IPV6_CHECKED ]:        false, \r\n            [ IPV4_MAPPED_CHECKED ]: false, \r\n            [ IP_CHECKBOX_NAME ]:    false, \r\n\r\n            /* Section declaring the state properties for storing whether or \r\n             not an input field the associated \"name\" attribute has an invalid \r\n             \"value\" JavaScript property. */\r\n            [ HOSTNAME_NAME + ERROR_ENDING ]: false, \r\n            [ IP_NAME + ERROR_ENDING ]:       false, \r\n            [ NETMASK_NAME + ERROR_ENDING ]:  false, \r\n            [ GATEWAY_NAME + ERROR_ENDING ]:  false, \r\n            [ DNS1_NAME + ERROR_ENDING ]:     false, \r\n            [ DNS2_NAME + ERROR_ENDING ]:     false, \r\n\r\n            [ HOSTNAME_NAME + REFRESH_ENDING ]: false, \r\n            [ IP_NAME + REFRESH_ENDING ]:       false, \r\n            [ NETMASK_NAME + REFRESH_ENDING ]:  false, \r\n            [ GATEWAY_NAME + REFRESH_ENDING ]:  false, \r\n            [ DNS1_NAME + REFRESH_ENDING ]:     false, \r\n            [ DNS2_NAME + REFRESH_ENDING ]:     false, \r\n\r\n            processing: false, \r\n            inputRefresh: false, \r\n            loginDisappear: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const ERROR_ENDING = \"HasError\", REFRESH_ENDING = \"Refresh\";\r\n\r\n        const HOSTNAME_NAME = \"hostname\", HOSTNAME_TITLE = \"Hostname\";\r\n        const HOSTNAME_ERROR = HOSTNAME_NAME + ERROR_ENDING;\r\n        const HOSTNAME_REFRESH = HOSTNAME_NAME + REFRESH_ENDING;\r\n        const HOSTNAME_REQUIRED = true;\r\n\r\n        /* Specifies whether or not hostnames should be required to be \r\n         fully-qualified domain names. */\r\n        const FULLY_QUALIFIED = false;\r\n\r\n        const DHCP_NAME = \"dhcp\", DHCP_TITLE = \"DHCP\", DHCP_CHECKED = false;\r\n\r\n        const IP_CHECKBOX_NAME = \"privateIp\";\r\n        const IP_CHECKBOX_TITLE = \"Private IP Address?\";\r\n\r\n        const IPV4_NAME = \"ipv4\", NUM_IPV4_OCTETS = 4;\r\n        const IPV4_CIDR_REQUIRED = false;\r\n\r\n        const IPV6_NAME = \"ipv6\";\r\n        const IPV4_MAPPED_IPV6 = \"ipv4MappedIpv6\";\r\n\r\n        const CHECKED_ENDING = \"Checked\";\r\n        const IPV4_CHECKED = IPV4_NAME + CHECKED_ENDING;\r\n        const IPV6_CHECKED = IPV6_NAME + CHECKED_ENDING;\r\n        const IPV4_MAPPED_CHECKED = IPV4_MAPPED_IPV6 + CHECKED_ENDING;\r\n        \r\n        const NETMASK_NAME = \"netmask\";\r\n        const GATEWAY_NAME = \"gateway\";\r\n        const DNS1_NAME = \"dns1\", DNS2_NAME = \"dns2\";\r\n\r\n        return (\r\n            <form id = \"networkForm\">\r\n                <HostnameInput \r\n                    name = { HOSTNAME_NAME } \r\n                    fieldTitle = { HOSTNAME_TITLE } \r\n\r\n                    value = {\r\n                        this.state[ HOSTNAME_NAME ] \r\n                            ? this.state[ HOSTNAME_NAME ] \r\n                            : \"\" \r\n                    } \r\n\r\n                    updateParentState = { (newValue, hasError) => {\r\n                        this.setState({\r\n                            [ HOSTNAME_NAME ]: newValue, \r\n                            [ HOSTNAME_ERROR ]: hasError, \r\n                            [ HOSTNAME_REFRESH ]: false \r\n                        });\r\n                    } }\r\n\r\n                    required = { HOSTNAME_REQUIRED } \r\n                    fullyQualified = { FULLY_QUALIFIED }\r\n                    disabled = { this.state.processing } \r\n                    inputRefresh = { this.state.inputRefresh } \r\n                    errorRefresh = { this.state[ HOSTNAME_REFRESH ] } \r\n                /> \r\n\r\n                <FormCheckbox \r\n                    name = { DHCP_NAME } \r\n                    fieldTitle = { DHCP_TITLE } \r\n                    checked = { DHCP_CHECKED } \r\n                    disabled = { this.state.processing } \r\n\r\n                    onChange = { (checked) => {\r\n                        this.setState({ \r\n                            [ DHCP_NAME ]: checked \r\n                        });\r\n                    } } \r\n                />\r\n\r\n                <div \r\n                    id = { DHCP_NAME + \"SettingsContainer\" } \r\n                    className = { \"toggleContainer multiContainerSizing \" + ( \r\n                        this.state[ DHCP_NAME ] ? \" toggleDisappearance\" : \"\"  \r\n                    ) } \r\n                >\r\n                    <IpRadioButtons \r\n                        disabled = { this.state.processing } \r\n                        onChange = { (checkedName, newValue) => {\r\n                            this.setState({\r\n                                [ checkedName ]: newValue \r\n                            });\r\n                        } } \r\n                    />\r\n\r\n                    <FormCheckbox \r\n                        name =       { IP_CHECKBOX_NAME } \r\n                        fieldTitle = { IP_CHECKBOX_TITLE } \r\n                        checked =    { this.state[ IP_CHECKBOX_NAME ] } \r\n                        disabled =   { this.state.processing } \r\n\r\n                        onChange = { (checked) => {\r\n                            this.setState({ \r\n                                [ IP_CHECKBOX_NAME ]: checked \r\n                            });\r\n                        } } \r\n                    />\r\n\r\n                    <Ipv4Input \r\n                        name =         { IPV4_NAME } \r\n                        fieldTitle =   { \"IPv4 address\" } \r\n                        typeChecked =  { this.state[ IPV4_CHECKED ] } \r\n                        numOctets =    { NUM_IPV4_OCTETS } \r\n                        onlyPrivate =  { this.state[ IP_CHECKBOX_NAME ] } \r\n                        cidrRequired = { IPV4_CIDR_REQUIRED } \r\n                        disabled =     { this.state.processing } \r\n                    /> \r\n\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Network;","/* Core React import section */\r\nimport React from \"react\";\r\n\r\n/* Stylesheet import section */\r\n\r\n/* Custom Component import section */\r\n\r\n\r\nclass Password extends React.Component {\r\n\r\n\r\n}\r\n\r\nexport default Password;","/* Core React import section */\r\nimport React from \"react\";\r\n\r\n/* Stylesheet import section */\r\n\r\n/* Custom Component import section */\r\n\r\n\r\nclass Title extends React.Component {\r\n\r\n\r\n}\r\n\r\nexport default Title;","/* Core React import section */\r\nimport React  from 'react';\r\n\r\n/* Stylesheet import section */\r\nimport \"../stylesheets/MainStyles.css\";\r\n\r\n/* Custom Component import section */\r\nimport Logout   from './Logout.jsx';\r\nimport NavBar   from '../nav/NavBar.jsx';\r\nimport Network  from '../network/Network.jsx';\r\nimport Password from './Password.jsx';\r\nimport Title    from './Title.jsx';\r\n\r\nclass SystemMain extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            pageTitle: \"\", \r\n            componentId: \"\" \r\n        }\r\n    }\r\n\r\n    getMainElement() {\r\n\r\n        const DEFAULT_TITLE = \"Title Not Set\";\r\n\r\n        if ( typeof document.body.style.backgroundSize === \"string\" ) {\r\n\r\n            return (\r\n                <main \r\n                    id = \"mainContent\" \r\n                    className = { \"mainContent\" + (\r\n                        this.state.componentId ? \"\" : \" mainBottomSpace\" \r\n                    ) } \r\n                >\r\n                    <h1 \r\n                        id = \"pageTitle\" \r\n                        className = \"pageTitle\"\r\n                    >\r\n                        { \r\n                            this.state.pageTitle \r\n                                ? this.state.pageTitle \r\n                                : DEFAULT_TITLE \r\n                        } \r\n                    </h1>\r\n\r\n                    { this.getComponent() } \r\n                </main>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div \r\n                id = \"mainContent\" \r\n                className = { \"mainContent\" + (\r\n                    this.state.componentId ? \"\" : \" mainBottomSpace\" \r\n                ) } \r\n                role = \"main\" \r\n            >\r\n                <h1 \r\n                    id = \"pageTitle\" \r\n                    className = \"pageTitle\"\r\n                >\r\n                    { \r\n                        this.state.pageTitle \r\n                            ? this.state.pageTitle \r\n                            : DEFAULT_TITLE \r\n                    } \r\n                </h1>\r\n\r\n                { this.getComponent() } \r\n            </div>\r\n        );\r\n    }\r\n\r\n    setComponentId(event, newId) {\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        \r\n        this.setState({ componentId: newId.toLowerCase() });\r\n    }\r\n\r\n    getComponent() {\r\n\r\n        switch ( this.state.componentId.toLowerCase() ) {\r\n\r\n            case \"logout\":\r\n                return <Logout/>;\r\n            \r\n            case \"network\":\r\n                return <Network/>;\r\n\r\n            case \"password\":\r\n                return <Password/>;\r\n\r\n            case \"title\":\r\n                return <Title/>\r\n            \r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className = \"mainContainer\">\r\n\r\n                <NavBar \r\n                    setComponentId = { (event, newId) => {\r\n                        this.setComponentId(event, newId);\r\n                    } } \r\n                />\r\n\r\n                { this.getMainElement() } \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SystemMain;","\r\nclass CheckSession {\r\n\r\n    /**\r\n     * Tries to check whether a user has a valid session id and whether a \r\n     * session's expiration date has been reached. \r\n     * \r\n     * @throws - \r\n     * - A ReferenceError exception if no JavaScript APIs for storing session \r\n     *   information are supported by a user's Internet browser. \r\n     * \r\n     * @returns { boolean } - \r\n     * Boolean true or false \r\n     */\r\n    checkSession() {\r\n\r\n        /* Check for a session cookie. */\r\n        let result = this.checkSessionCookie();\r\n\r\n        if ( result !== null ) {\r\n            \r\n            return result;\r\n        }\r\n        \r\n        /* Check for a session expiration date in SessionStorage. */\r\n        result = this.checkSessionStorage();\r\n\r\n        if ( result !== null ) {\r\n\r\n            return result;\r\n        }\r\n\r\n        throw new ReferenceError(\"No JavaScript APIs supported or enabled for \" \r\n            + \"checking session information.\");\r\n    }\r\n\r\n    /**\r\n     * Checks if a session has ever been established by the login system for a \r\n     * user. If cookies are supported and enabled in the user's Internet \r\n     * browser, checks whether an unexpired session id is present in the \r\n     * current page's cookie contents. \r\n     * \r\n     * If one is, check to see whether the session id is the same as the user's \r\n     * official session id record in the JavaScript SessionStorage API, if it \r\n     * is supported and enabled. This process simulates prevention of session \r\n     * and account hijacking by another user. Otherwise, the code assumes the \r\n     * session id is valid since it has not expired yet. \r\n     * \r\n     * This code simulates the process of checking whether a user's login \r\n     * session is still valid in a database, except on the client side. \r\n     * \r\n     * @returns { boolean | null } - \r\n     * - Boolean true or false depending on whether an expiration date value \r\n     *   for a session is present in SessionStorage and has been surpassed yet. \r\n     * - null if the JavaScript SessionStorage API is unsupported or disabled. \r\n     */\r\n    checkSessionCookie() {\r\n\r\n        /* Check cannot be done if the browser does not support cookies or has \r\n         cookies disabled. */\r\n        if ( !this.supportsCookies() ) {\r\n\r\n            return null;\r\n        }\r\n\r\n        /* Constant declaration for session information cookie name and \r\n         SessionStorage key name. */\r\n        const SESSION_TITLE = \"sessionId\";\r\n        const COOKIE_TITLE = SESSION_TITLE + \"=\";\r\n\r\n        /* Session cookie's contents will be located after its cookie entry \r\n         name and an equals sign (=) in the list of all of the cookies \r\n         accessible by the current domain. */\r\n        let contents = document.cookie;\r\n        let cookieIndex = contents.indexOf(COOKIE_TITLE);\r\n\r\n        if ( cookieIndex === -1 ) {\r\n\r\n            return false;\r\n        }\r\n\r\n        /* The cookie's contents will be followed by a semicolon delimeter \r\n         separating it from other cookie info fields. */\r\n        cookieIndex += COOKIE_TITLE.length;\r\n        let endIndex = contents.indexOf(\";\", cookieIndex);\r\n\r\n        if ( endIndex === -1 ) {\r\n\r\n            endIndex = contents.length;\r\n        }\r\n\r\n        /* Gets the cookie contents between the name and ending semicolon. */\r\n        let sessionId = contents.substring(cookieIndex, endIndex);\r\n\r\n        /* If the browser supports or has SessionStorage enabled, check if the \r\n         current session id matches the one in SessionStorage, simulating \r\n         session checking from a database. Also refreshes the length of the \r\n         session to start at the current time. */\r\n        if ( this.hasSessionStorage() ) {\r\n\r\n            return sessionId === sessionStorage.getItem(SESSION_TITLE) \r\n                && this.extendSessionCookie();\r\n        }\r\n\r\n        /* If SessionStorage is disabled and the cookie still has an unexpired \r\n         session id, let the user log into the system. Also refreshes the \r\n         length of the session to start at the current time. */\r\n        return this.extendSessionCookie();\r\n    }\r\n\r\n    extendSessionCookie() {\r\n\r\n        /* Check cannot be done if the browser does not support cookies or has \r\n         cookies disabled. */\r\n        if ( !this.supportsCookies() ) {\r\n\r\n            return null;\r\n        }\r\n\r\n        const contents = document.cookie.split(/;[\\s]+/);\r\n        const COOKIE_NAME = \"sessionId=\", MAX_AGE = 1800, date = new Date();\r\n        date.setTime( date.getTime() + (MAX_AGE * 1000) );\r\n\r\n        let index = 0;\r\n        \r\n        while ( index < contents.length \r\n            && contents[index].indexOf(COOKIE_NAME) !== 0 ) {\r\n\r\n            index++;\r\n        }\r\n\r\n        if ( index === contents.length ) {\r\n\r\n            return false;\r\n        }\r\n\r\n        index++;\r\n\r\n        contents.splice( index, 0, \"max-age=\" + MAX_AGE );\r\n        index++;\r\n\r\n        contents.splice( index, 0, \"expires=\" + date.toUTCString() );\r\n        index++;\r\n\r\n        document.cookie = contents.join(\"; \");\r\n        return true;\r\n    }\r\n\r\n    supportsCookies() {\r\n\r\n        return \"cookie\" in document && window.navigator.cookieEnabled;\r\n    }\r\n\r\n    /**\r\n     * Checks if a session has ever been established by the login system for a \r\n     * user. Checks whether the session expiration date is stored in the \r\n     * JavaScript SessionStorage API, if it is supported and enabled in the \r\n     * user's Internet browser. If it is, checks to see whether the current \r\n     * session has expired yet. This code simulates the process of checking \r\n     * whether a user's login session is still valid in a database, except on \r\n     * the client side. \r\n     * \r\n     * @returns { boolean | null } - \r\n     * - Boolean true or false depending on whether an expiration date value \r\n     *   for a session is present in SessionStorage and has been surpassed yet. \r\n     * - null if the JavaScript SessionStorage API is unsupported or disabled. \r\n     */\r\n    checkSessionStorage() {\r\n\r\n        /* Cannot run if SessionStorage is unsupported or disabled in a user's \r\n         web browser. */\r\n        if ( !this.hasSessionStorage() ) {\r\n\r\n            return null;\r\n        }\r\n\r\n        /* Contains the key for the session expiration date value. */\r\n        const RECORD_TITLE = \"sessionExpires\";\r\n\r\n        /* Tries to get any record with the key name from SessionStorage, if it \r\n         exists. */\r\n        const expireRecord = sessionStorage.getItem(RECORD_TITLE);\r\n\r\n        /* If the entry exists, convert it to a Number, and check whether the \r\n         expiration date has been reached. If not, refresh the life of the \r\n         session, starting at the current time. */\r\n        if (expireRecord) {\r\n\r\n            let expireNum = Number(expireRecord);\r\n\r\n            if ( !isNaN(expireNum) \r\n                 && ( new Date ).getTime() < expireNum ) {\r\n                \r\n                return this.extendSessionStorage();\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    extendSessionStorage() {\r\n\r\n        if ( !this.hasSessionStorage() ) {\r\n\r\n            return null;\r\n        }\r\n\r\n        const EXPIRE_KEY = \"sessionExpires\", MAX_AGE = 1800000;\r\n\r\n        try {\r\n\r\n            sessionStorage.setItem(\r\n                EXPIRE_KEY, \r\n                String( ( new Date() ).getTime() + MAX_AGE ) \r\n            );\r\n        }\r\n        catch (error) {\r\n\r\n            console.error(error);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests whether or not the JavaScript SessionStorage API is supported and \r\n     * enabled in the user's Internet browser. \r\n     * \r\n     * @returns {boolean} - \r\n     * Boolean true or false\r\n     */\r\n    hasSessionStorage() {\r\n\r\n        /* Try to define a global SessionStorage reference if one does not \r\n         exist. */\r\n        if (!sessionStorage) {\r\n\r\n            sessionStorage = window.sessionStorage;\r\n        }\r\n        \r\n        /* \r\n           - If SessionStorage is supported, try storing a dummy test value in \r\n             it. \r\n           - If successful, SessionStorage is enabled and not full. \r\n           - If unsuccessful, setItem() will throw an exception since \r\n             SessionStorage is either disabled or full. \r\n        */\r\n        if (sessionStorage) {\r\n\r\n            const TEST_KEY = \"enabled\";\r\n\r\n            try {\r\n\r\n                sessionStorage.setItem(TEST_KEY, \"true\");\r\n            }\r\n            catch (error) {\r\n\r\n                console.error(error);\r\n                return false;\r\n            }\r\n\r\n            sessionStorage.removeItem(TEST_KEY);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default new CheckSession();","/* Core React import section */\nimport React from 'react';\n\n/* Stylesheet import section */\nimport \"./stylesheets/Formatting.css\";\nimport \"./stylesheets/FormStyles.css\";\n\n/* Custom Component and functionality import section */\nimport LoginForm    from './login/LoginForm';\nimport SystemMain   from './system/SystemMain.jsx';\nimport SessionCheck from './login/processing/CheckSession.js';\n\nclass App extends React.Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n\n            loading: false, \n\n            /* Indicates whether or not the user is currently logged in. Note \n             that in actual production code, a user's website login status \n             would be determined by the server, not by the client. */\n            isLoggedIn: false\n        };\n    }\n\n    async componentDidMount() {\n\n        this.setState({\n            isLoggedIn: SessionCheck.checkSession() \n        });\n    }\n\n    async doLogout() {\n\n        \n    }\n\n    render() {\n\n        if (this.state.loading) {\n\n            return (\n                <div className=\"container\">\n                    Loading; please wait...\n                </div>\n            );\n        }\n\n        if (this.state.isLoggedIn) {\n\n            return (\n                <div className = \"contentWrapper\">\n                    <div className = \"contentCentering\">\n                        <SystemMain />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className = \"contentWrapper\">\n                <div className = \"contentCentering\">\n                    <LoginForm \n                        updateLoginStatus = { (attemptResult) => {\n                            this.setState({\n                                isLoggedIn: attemptResult\n                            });\n                        } } \n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}